<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hiromasa.info (Posts about nikola)</title><link>http://www.hiromasa.info/</link><description></description><atom:link href="http://www.hiromasa.info/en/categories/nikola.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:stoicheia1986@gmail.com"&gt;Hiromasa OHASHI&lt;/a&gt; </copyright><lastBuildDate>Sun, 10 Feb 2019 06:26:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>nikolaで多国語ポスト対応</title><link>http://www.hiromasa.info/en/posts/12/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h3&gt;nikolaで多国語ポスト対応&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getnikola.com/handbook.html"&gt;nikola handbook&lt;/a&gt;のMultilingual postsの項を見ながら多国語対応の設定を行う。&lt;/p&gt;
&lt;h4&gt;基本的な設定&lt;/h4&gt;
&lt;p&gt;記事や固定ページの多国語対応を行う場合、&lt;code&gt;conf.py&lt;/code&gt;の&lt;code&gt;TRANSLATIONS_PATTERN&lt;/code&gt;で指定されたパターンに沿ったファイル名で言語ごとに記事を作成することになる。デフォルトだと&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TRANSLATIONS_PATTERN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"{path}.{lang}.{ext}"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;という指定になっているため、この記事(&lt;code&gt;12.md&lt;/code&gt;)であれば英語ポストを作成する場合は&lt;code&gt;12.en.md&lt;/code&gt;というファイル名を付けることとなる。&lt;/p&gt;
&lt;p&gt;上記パターンをどの国の言語に対応させるかどうかは&lt;code&gt;TRANSLATIONS&lt;/code&gt;の設定を変更する。この設定では各言語をkeyとしてprefixとなるパスをvalueに持つdictを設定する。デフォルトでは&lt;code&gt;DEFAULT_LANG : ""&lt;/code&gt;のみが指定されているため、新たに追加したい言語とprefixを次にような形で指定する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TRANSLATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"./en"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;この設定を行った上で&lt;code&gt;nikola build&lt;/code&gt;を実行すると、過去の諸々のポストに対しても多言語対応のための再生成が走るためかブログ構築までに5分ほどを要する。構築後、&lt;code&gt;nikola serve -b&lt;/code&gt;でローカルのブラウザ上でブログを閲覧すると右上に&lt;code&gt;English&lt;/code&gt;という表示が増える(3カ国語以上設定した場合は試していないがおそらく選択できるようになると思われる)。
独自ドメインを設定している場合はこの&lt;code&gt;English&lt;/code&gt;をクリックすると存在しないページにアクセスすることになるため、ローカルサーバ上でアクセスするためにはアドレスバーに&lt;code&gt;127.0.0.1:8000/en&lt;/code&gt;と手動で打ち込む必要がある。このページにアクセスすると、英語版のページが表示される。
しかし、上記設定だけでは特に翻訳版の記事を用意していないため、ポストについては日本語版と全く同一の記事が表示され、また、それ以外の上部メニュー(ナビゲーションバー)なども翻訳されず日本語のままとなってしまっている。&lt;/p&gt;
&lt;p&gt;以下ではこれらの多国語化について記す。多言語対応可能な設定項目については&lt;code&gt;conf.py&lt;/code&gt;において&lt;code&gt;(translatable)&lt;/code&gt;というコメントが添えられているため、基本的にはこれらの設定項目を調整していくことになる。&lt;/p&gt;
&lt;h4&gt;ナビゲーションバーの多言語化&lt;/h4&gt;
&lt;p&gt;ナビゲーションバーについては&lt;code&gt;NAVIGARTION_LINKS&lt;/code&gt;の設定を次のように変更する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;NAVIGATION_LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/archive.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"文書一覧"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/categories/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"タグ"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/pages/about/index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"About"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/rss.xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"RSSフィード"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/en/archive.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"all posts"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/en/categories/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"tag"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/en/pages/about/index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"about"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/en/rss.xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"RSS feed"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;ここでは各言語をkeyとし、対応するパスとリンク名のタプルのタプルをvalueとするdictを設定している。
"en"に対して"/en"で始まるパスを指定していることに注意。&lt;/p&gt;
&lt;h4&gt;タグ、カテゴリの多言語化(調査中)&lt;/h4&gt;
&lt;p&gt;nikola v8ではポストごとに複数の分類を与えるタグ(tags)と、単一の分類を与えるカテゴリ(categories)が提供されている。現時点で当ブログはタグしか用いていない。なお前のポストにも記したが、nikolaのversion 7まではセクション(sections)という分類方法も存在していたが、これはversion 8以降は削除されている(nikola handbookにはこの機能は&lt;code&gt;CATEGORY_DESTPATH&lt;/code&gt;の設定を用いて実現可能との記載がある)。
タグやカテゴリの多言語化の仕方であるが、&lt;code&gt;conf.py&lt;/code&gt;を見ると&lt;code&gt;TAG_TRANSLATION&lt;/code&gt;や&lt;code&gt;CATEGORY_TRANSLATION&lt;/code&gt;に&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'private'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'de'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Privat'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'work'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fr'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'travail'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'de'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Arbeit'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;のような辞書のリストを指定すれば良いとの記載がある。しかしこれを日本語と英語の間の翻訳で試みたところ、英語ページにおいても日本語タグが指定した英語タグに翻訳されず日本語タグのままとなる現象を確認している。この現象の解決のためには調査を行う必要があるため、現時点ではタグ、カテゴリの多言語化は実現できていない。&lt;/p&gt;
&lt;h4&gt;多言語ポストの混在&lt;/h4&gt;
&lt;p&gt;多言語ブログを作成する場合、基本的に日本語で書いた記事は英語版では表示させず、翻訳を行った記事のみを英語版で表示するようにしたい。しかし、nikolaでは現状そのような制御を行うことができない。
&lt;a href="https://github.com/getnikola/nikola/issues/2901"&gt;このissue&lt;/a&gt;において同様な要望が上がっているが、しばらくは対応されなさそうな雰囲気がある。&lt;/p&gt;
&lt;h3&gt;その他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;日本語タグに対応するURLが漢字部分については中国語の発音として変換されているが、これは依存ライブラリである&lt;a href="https://pypi.org/project/Unidecode/"&gt;unidecode&lt;/a&gt;のせいである。これは&lt;code&gt;utils.py&lt;/code&gt;に実装されている&lt;code&gt;slugify&lt;/code&gt;を呼ぶ際に呼び出される。このunidecodeであるが、元は&lt;a href="https://metacpan.org/pod/Text::Unidecode"&gt;perlのモジュール&lt;/a&gt;なのであるが、この説明において日本語では正しくない結果が出力されるだろうとの記載がある。したがって解決するためには日本語だけ特別扱いし、更にmecabなどで読み付与を行うといった作業が必要となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;結論&lt;/h3&gt;
&lt;p&gt;現状nikolaで多言語サイトを作成する場合は中途半端な多言語サイトしか実現できないのが実情である。余裕があれば原因調査の上でこの記事についても追記を行なっていきたい。&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.hiromasa.info/en/posts/12/</guid><pubDate>Sun, 16 Sep 2018 03:30:00 GMT</pubDate></item><item><title>nikolaのバージョンをv8.0.0にアップグレード</title><link>http://www.hiromasa.info/en/posts/11/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h3&gt;nikolaのバージョンをv8.0.0にアップグレード&lt;/h3&gt;
&lt;h4&gt;nikola v8.0.0&lt;/h4&gt;
&lt;p&gt;2018/9/11にnikolaのメジャーバージョンが8.0にアップグレードされた。&lt;code&gt;pip install -U "Nikola[extras]"&lt;/code&gt;を実行しアップグーレドを施したところ、各種設定を変更しなければならなかったためその作業ログを以下に記す。&lt;/p&gt;
&lt;p&gt;各種設定変更のためには&lt;a href="https://getnikola.com/blog/upgrading-to-nikola-v8.html"&gt;Upgrading to Nikola v8&lt;/a&gt;を参照すると良い。
ここでは単純に&lt;code&gt;pip install -U "Nikola[extras]"&lt;/code&gt;を実行してしまったが、実際には&lt;code&gt;How to upgrade&lt;/code&gt;の手順を読んだ上でアップグレードを行ったほうが良いと思われる。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;conf.py&lt;/code&gt;の修正&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;nikola --version&lt;/code&gt;をブログが存在するディレクトリで実行したところ下記の警告が出た。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;[2018-09-16T03:11:45Z] WARNING: Nikola: The UNSLUGIFY_TITLES setting was renamed to FILE_METADATA_UNSLUGIFY_TITLES.
[2018-09-16T03:11:45Z] WARNING: Nikola: The sections feature has been removed and its functionality has been merged into categories.
[2018-09-16T03:11:45Z] WARNING: Nikola: For more information on how to migrate, please read: https://getnikola.com/blog/upgrading-to-nikola-v8.html#sections-were-replaced-by-categories
[2018-09-16T03:11:45Z] INFO: Nikola: Setting CATEGORY_DESTPATH_AS_DEFAULT = True
[2018-09-16T03:11:46Z] WARNING: Nikola: Cannot load theme "bootstrap3", using 'bootblog4' instead.
... 以後bootstrap3が存在しない旨を示すpythonのTracebackが表示される ...
&lt;/pre&gt;


&lt;p&gt;これらのwarningを修正するために、下記に記した内容を実行した。&lt;/p&gt;
&lt;h5&gt;名称が変更された設定の変更&lt;/h5&gt;
&lt;p&gt;手元では&lt;code&gt;UNSLUGIFY_TITLES&lt;/code&gt;を&lt;code&gt;FILE_METADATA_UNSLUGIFY_TITLES&lt;/code&gt;に変更するのみで前述の最初のWARNINGは消えた。
どうやら&lt;a href="https://getnikola.com/blog/upgrading-to-nikola-v8.html"&gt;Upgrading to Nikola v8&lt;/a&gt;を参照すると他項目についても変更されたものがある模様。以下に抜粋する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;削除されたもの&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FEED_PREVIEWIMAGE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SITEMAP_INCLUDE_FILELESS_DIRS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_OPEN_GRAPH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_BASE_TAG&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;名称が変更されたもの&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UNSLUGIFY_TITLES&lt;/code&gt; -&amp;gt; &lt;code&gt;FILE_METADATA_UNSLUGIFY_TITLES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TAG_PAGES_TITLES&lt;/code&gt; -&amp;gt; &lt;code&gt;TAG_TITLES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TAG_PAGES_DESCRIPTIONS&lt;/code&gt; -&amp;gt; &lt;code&gt;TAG_DESCRIPTIONS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CATEGORY_PAGES_TITLES&lt;/code&gt; -&amp;gt; &lt;code&gt;CATEGORY_TITLES&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CATEGORY_PAGES_DESCRIPTIONS&lt;/code&gt; -&amp;gt; &lt;code&gt;CATEGORY_DESCRIPTIONS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DISABLE_INDEXES_PLUGIN_INDEX_AND_ATOM_FEED&lt;/code&gt; -&amp;gt; &lt;code&gt;DISABLE_INDEXES and DISABLE_MAIN_ATOM_FEED&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DISABLE_INDEXES_PLUGIN_RSS_FEED&lt;/code&gt; -&amp;gt; &lt;code&gt;DISABLE_MAIN_RSS_FEED&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実際には他にも変更された項目が存在するため、調査した結果を末尾に示してある。&lt;/p&gt;
&lt;h5&gt;セクション(Sections)関連の設定の変更&lt;/h5&gt;
&lt;p&gt;v8からはセクション関連の機能が削除されカテゴリに統合されたため、関連設定を削除する必要がある。
&lt;a href="https://getnikola.com/blog/upgrading-to-nikola-v8.html"&gt;Upgrading to Nikola v8&lt;/a&gt;には書かれていないが、そもそも&lt;code&gt;POSTS_SECTIONS&lt;/code&gt;の項目を消す必要がある。
これによって前述のログに存在したセクション関連の警告は消失する。&lt;/p&gt;
&lt;h5&gt;デフォルトテーマの変更&lt;/h5&gt;
&lt;p&gt;アップグレード前はデフォルトテーマの&lt;code&gt;bootstrap3&lt;/code&gt;を使っていたが、v8ではデフォルトテーマが&lt;code&gt;bootblog4&lt;/code&gt;に変更された。
&lt;a href="https://getnikola.com/blog/upgrading-to-nikola-v8.html"&gt;Upgrading to Nikola v8&lt;/a&gt;によれば&lt;code&gt;nikola theme -i bootstrap3&lt;/code&gt;を実行しテーマをインストールすることによってbootstrap3は依然として使用できるようであるが、新デフォルトテーマのbootblog4では&lt;code&gt;featured posts&lt;/code&gt;の表示などができるなど機能が追加されているとのことである。&lt;/p&gt;
&lt;p&gt;ここでは&lt;code&gt;bootblog4&lt;/code&gt;への変更を行った。前述のログでは最後の部分でpythonのTracebackが大量に表示されていたため、この修正も合わせて行った。以下に修正のために実施した内容を順に記す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conf.py&lt;/code&gt;の&lt;code&gt;THEME&lt;/code&gt;を&lt;code&gt;bootblog4&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nikola build&lt;/code&gt;を実行&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nikola --version&lt;/code&gt;を実行したときと同様なbootstrap3が存在しないというExceptionが表示され、再構築を行うことができない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;キャッシュが影響していることを疑い&lt;code&gt;cache&lt;/code&gt;ディレクトリと&lt;code&gt;__pycache__&lt;/code&gt;ディレクトリを削除&lt;ul&gt;
&lt;li&gt;状況は変化しない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nikola theme -i bootstrap3&lt;/code&gt;を実行&lt;ul&gt;
&lt;li&gt;依然としてbootstrap3が存在しないというExceptionが表示されるためbootstrap3を再度導入することもできない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exceptionを吐いている&lt;code&gt;site-packages/nikola/utils.py&lt;/code&gt;のソースを調査&lt;ul&gt;
&lt;li&gt;エラーを吐いている&lt;code&gt;get_asset_path&lt;/code&gt;のメソッドにおいてthemesのディレクトリを走査していることが問題の模様&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ブログルート直下のthemesディレクトリを他の場所に一時的に退避&lt;ul&gt;
&lt;li&gt;Exceptionを吐くエラーが消失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nikola build&lt;/code&gt;を実行&lt;ul&gt;
&lt;li&gt;無事にブログが再構築&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;したがって、theme関連のトラブルがなければ&lt;code&gt;conf.py&lt;/code&gt;の修正のみで済む内容であったと思われる。&lt;/p&gt;
&lt;h4&gt;その他&lt;code&gt;conf.py&lt;/code&gt;の変化&lt;/h4&gt;
&lt;p&gt;折角なので新規に&lt;code&gt;nikola init&lt;/code&gt;を実行して生成したブログの&lt;code&gt;conf.py&lt;/code&gt;とのdiffを取ってその他の変更を調べた。
コメントの変更や前述した変更については記載していない。また各項目の意味については全て把握していないため必要な場合は新規生成した&lt;code&gt;conf.py&lt;/code&gt;に付与されたコメントなどを読んだほうが良い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from __future__ import unicode_literals&lt;/code&gt;の削除&lt;/li&gt;
&lt;li&gt;対応言語の追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ml&lt;/code&gt;, &lt;code&gt;th&lt;/code&gt;, &lt;code&gt;vi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;テーマ依存設定&lt;ul&gt;
&lt;li&gt;&lt;code&gt;THEME_CONFIG&lt;/code&gt;が追加されており、bootblog4テーマはこの設定によりfeatured postの設定やsidebarの設定が行えるようである&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DATE_FORMAT&lt;/code&gt;の変更&lt;ul&gt;
&lt;li&gt;元はdatetime.datetime.strftimeで用いられる形式だったがCLDRで用いられるフォーマットに変更されたとのこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCALE_FALLBAK&lt;/code&gt;と&lt;code&gt;LOCALE_DEFAULT&lt;/code&gt;の削除&lt;/li&gt;
&lt;li&gt;セクション関連の項目の削除&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WRITE_TAG_CLUD&lt;/code&gt;, &lt;code&gt;POST_SECTIONS&lt;/code&gt;, &lt;code&gt;POST_SECTIONS_ARE_INDEXED&lt;/code&gt;, &lt;code&gt;SECTION_PATH&lt;/code&gt;, &lt;code&gt;POSTS_SECTION_COLORS&lt;/code&gt;, &lt;code&gt;POSTS_SECTION_DESCRIPTIONS&lt;/code&gt;, &lt;code&gt;POSTS_SECTION_FROM_META&lt;/code&gt;, &lt;code&gt;POSTS_SECTOIN_NAME&lt;/code&gt;, &lt;code&gt;POSTS_SECTION_TITLE&lt;/code&gt;, &lt;code&gt;POSTS_SECTION_TRANSLATIONS&lt;/code&gt;, &lt;code&gt;POSTS_SECTION_TRANSLATIONS_ADD_DEFAULTS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;カテゴリー関連の項目の追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CATEGORY_DESTPATH_AS_DEFAULT&lt;/code&gt;, &lt;code&gt;CATEGORY_DESTPATH_TRIM_PREFIX&lt;/code&gt;, &lt;code&gt;CATEGORY_DESTPATH_FIRST_DIRECTORY_ONLY&lt;/code&gt;, &lt;code&gt;CATEGORY_DESTPATH_NAMES&lt;/code&gt;, &lt;code&gt;CATEGORY_PAGES_FOLLOW_DESTPATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSS関連の項目のの追加&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RSS_EXTENSION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RSS_FILENAME_BASE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ATOM_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ATOM_FILENAME_BASE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ATOM_EXTENSION&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_BASE_TAG&lt;/code&gt;の削除&lt;/li&gt;
&lt;li&gt;LESS, SASS関連設定の削除&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LESS_COMPILER&lt;/code&gt;, &lt;code&gt;LESS_OPTIONS&lt;/code&gt;, &lt;code&gt;SASS_COMPILER&lt;/code&gt;, &lt;code&gt;SASS_OPTIONS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PRESERVE_ICC_PROFILES&lt;/code&gt;の追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ANNOTATIONS&lt;/code&gt;の削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MARKDOWN_EXTENSION_CONFIGS&lt;/code&gt;の追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;METADATA_VALUE_MAPPING&lt;/code&gt;の追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NO_DOCUTILS_TITLE_TRANSFORM&lt;/code&gt;の削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USE_TAG_METADATA&lt;/code&gt;および&lt;code&gt;WARN_ABOUT_TAG_METADATA&lt;/code&gt;の追加&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>http://www.hiromasa.info/en/posts/11/</guid><pubDate>Sun, 16 Sep 2018 03:30:00 GMT</pubDate></item><item><title>Travis CIによるNikolaブログ構築の自動化</title><link>http://www.hiromasa.info/en/posts/6/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h3&gt;Travis CIによるNikolaブログ構築の自動化&lt;/h3&gt;
&lt;p&gt;Nikolaでブログを構築するための方法は過去の記事(&lt;a href="http://www.hiromasa.info/posts/1/"&gt;1&lt;/a&gt;, &lt;a href="http://www.hiromasa.info/posts/2/"&gt;2&lt;/a&gt;, &lt;a href="http://www.hiromasa.info/posts/3/"&gt;3&lt;/a&gt;)に書いていますが、手元でのビルドのためにpythonやnikolaがインストールされたPCが必要になるため、ブログ記事を書くための環境が限定されてしまうという問題がありました。
そこで、この記事では&lt;a href="https://getnikola.com/blog/automating-nikola-rebuilds-with-travis-ci.html"&gt;Nikola公式の記事&lt;/a&gt;を参考に、Travis CIを用いることでsrcブランチにブログ記事をコミットするだけでTravis CI側で自動的にブログを構築し、masterブランチにプッシュしてくれる仕組みを構築する過程を紹介します。
なお、以下の作業はすべてsrcブランチ上で行います。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;conf.py&lt;/code&gt;の編集&lt;/h4&gt;
&lt;p&gt;まず、&lt;code&gt;nikola github_deploy&lt;/code&gt;コマンド実行時に、デプロイと同時にsrcブランチもコミットするかどうかを制御するためのオプションをFalseに設定します。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;GITHUB_COMMIT_SOURCE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;これはTravis CIではソースブランチへのコミットをトリガーに&lt;code&gt;nikola build &amp;amp;&amp;amp; nikola github_deploy&lt;/code&gt;を実行するため、&lt;code&gt;nikola github_deploy&lt;/code&gt;によってsrcブランチがコミットされると再度それがトリガーとなって無限ループに陥ってしまうことを防ぐためです。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;.travis.yml&lt;/code&gt;の作成&lt;/h4&gt;
&lt;p&gt;nikolaブログのルートディレクトリ(&lt;code&gt;conf.py&lt;/code&gt;が置いてあるディレクトリ)に以下のような&lt;code&gt;.travis.yml&lt;/code&gt;ファイルを作成します。
これは&lt;a href="https://getnikola.com/blog/automating-nikola-rebuilds-with-travis-ci.html"&gt;Nikola公式の記事&lt;/a&gt;に記載のtravis.ymlを改変したものになります。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="nt"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;apt&lt;/span&gt;
&lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
&lt;span class="nt"&gt;addons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;apt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;language-pack-ja-base&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;language-pack-ja&lt;/span&gt;
&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;src&lt;/span&gt;
&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.6&lt;/span&gt;
&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global user.name 'USERNAME'&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global user.email 'travis@invalid'&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global push.default 'simple'&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install --upgrade pip wheel&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo -e 'Host github.com\n    StrictHostKeyChecking no' &amp;gt;&amp;gt; ~/.ssh/config&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;eval "$(ssh-agent -s)"&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;chmod 600 id_rsa&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh-add id_rsa&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote rm origin&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote add origin git@github.com:USERNAME/REPO.git&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git fetch origin master&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git branch master FETCH_HEAD&lt;/span&gt;
&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install 'ghp-import2'&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install 'webassets'&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install 'Nikola[extras]'&lt;/span&gt;
&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nikola build &amp;amp;&amp;amp; nikola github_deploy -m 'Nikola auto deploy [ci skip]'&lt;/span&gt;
&lt;span class="nt"&gt;notifications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;on_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;change&lt;/span&gt;
    &lt;span class="nt"&gt;on_failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;always&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;ここで、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;- git config --global user.name 'USERNAME'
- git config --global user.email 'travis@invalid'
&lt;/pre&gt;


&lt;p&gt;の行は適切なユーザー名、メールアドレスに、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;- git remote add origin git@github.com:USERNAME/REPO.git
&lt;/pre&gt;


&lt;p&gt;の行は適切なユーザー名およびリポジトリ名に変更する必要があります。&lt;/p&gt;
&lt;h4&gt;SSH鍵の生成&lt;/h4&gt;
&lt;p&gt;まず、&lt;code&gt;.gitignore&lt;/code&gt;ファイルに&lt;code&gt;id_rsa&lt;/code&gt;と&lt;code&gt;id_rsa.pub&lt;/code&gt;を無視する設定を追記した上でSSH鍵を生成します。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; id_rsa &amp;gt;&amp;gt; .gitignore
$ &lt;span class="nb"&gt;echo&lt;/span&gt; id_rsa.pub &amp;gt;&amp;gt; .gitignore
$ ssh-keygen -C TravisCI -f id_rsa -N &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;上記を実行すると秘密鍵&lt;code&gt;id_rsa&lt;/code&gt;および公開鍵&lt;code&gt;id_rsa.pub&lt;/code&gt;が作成されます。
念のため、&lt;code&gt;.gitignore&lt;/code&gt;の無視設定が合っているかを確認するために&lt;code&gt;git status&lt;/code&gt;を実行してもaddされる対象となっていないことを確認しておきましょう。
なお&lt;code&gt;ssh-keygen&lt;/code&gt;の&lt;code&gt;-C&lt;/code&gt;はコメント、&lt;code&gt;-f&lt;/code&gt;は鍵名、&lt;code&gt;-N&lt;/code&gt;はパスフレーズの指定(ここでは空文字なので指定なし)です。&lt;/p&gt;
&lt;h4&gt;公開鍵のgithubリポジトリへの登録&lt;/h4&gt;
&lt;p&gt;生成した公開鍵はgithubリポジトリに登録しておく必要があります。
&lt;code&gt;リポジトリページ&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Deploy Keys&lt;/code&gt; -&amp;gt; &lt;code&gt;Add deploy key&lt;/code&gt;
からTitleをTravis CIとし、Keyに&lt;code&gt;idrsa.pub&lt;/code&gt;の中身をコピペして登録しましょう。
また、Allow write accessはチェックしておく必要があります。
これらの作業を忘れるとTravis CIの自動ビルド時にアクセスエラーが発生します。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;travis encrypt-file&lt;/code&gt;コマンドによる秘密鍵の暗号化&lt;/h4&gt;
&lt;p&gt;生成した秘密鍵&lt;code&gt;id_rsa&lt;/code&gt;は&lt;code&gt;travis encrypt-file&lt;/code&gt;によって&lt;code&gt;id_rsa.enc&lt;/code&gt;に共通鍵による暗号化を施した上でリポジトリに追加します。
この暗号化された&lt;code&gt;id_rsa.enc&lt;/code&gt;はTravis CIでの自動ビルド時に共通鍵によって復号化され、Travis CIのgithubへのアクセスに使用されます。&lt;/p&gt;
&lt;p&gt;この作業を実行するためにはtravisコマンドが必要となりますが、これはrubyのgemとして配布されているため、インストールされていない場合は下記にようにgemでインストールする必要があります。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ gem install --user-install travis
&lt;/pre&gt;


&lt;p&gt;なおtravisコマンドがインストールされる場所にPATHが通っていない場合はPATHに追加するか、下記一連のコマンドをフルパスで実行する必要があります。&lt;/p&gt;
&lt;p&gt;travisコマンドが実行可能になったら、更に下記を実行します。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ travis login
$ travis &lt;span class="nb"&gt;enable&lt;/span&gt;
$ travis encrypt-file id_rsa --add
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;travis login&lt;/code&gt;を実行するとgithubアカウントのユーザ名、パスワードを求められるため入力してください。
この上で&lt;code&gt;travis enable&lt;/code&gt;を実行すると自動ビルドを有効化するリポジトリが正しいか確認されるため、正しければyesと入力しましょう。
更に&lt;code&gt;travis encrypt-file id_rsa --add&lt;/code&gt;を実行すると、秘密鍵&lt;code&gt;id_rsa&lt;/code&gt;が暗号化されて&lt;code&gt;id_rsa.enc&lt;/code&gt;が生成されます。
この&lt;code&gt;id_rsa.enc&lt;/code&gt;は&lt;code&gt;.gitignore&lt;/code&gt;に追加されていないため、&lt;code&gt;git add&lt;/code&gt;によってgitの管理下に置かれることになります。
なお引数の&lt;code&gt;--add&lt;/code&gt;を付けておくと、&lt;code&gt;.travis.yml&lt;/code&gt;ファイルに&lt;code&gt;id_rsa.enc&lt;/code&gt;の復号化を行うための下記のようなopensslのコマンドを追加してくれます。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;openssl aes-256-cbc -K $encrypted_XXXXXX_key -iv $encrypted_XXXXXX_iv&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;-in id_rsa.enc -out id_rsa -d&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;-K&lt;/code&gt;は共通鍵、&lt;code&gt;-iv&lt;/code&gt;は初期ベクトルの指定であり、指定されている値はTravis CI側で環境変数として設定されています。
(ブラウザからTravis CIの設定を見ると確認することができます)&lt;/p&gt;
&lt;h4&gt;srcブランチへの各種ファイルのadd, commitおよびgithubへのpush&lt;/h4&gt;
&lt;p&gt;以上の作業により&lt;code&gt;conf.py&lt;/code&gt;、&lt;code&gt;.gitignore&lt;/code&gt;、&lt;code&gt;.travis.yml&lt;/code&gt;、&lt;code&gt;id_rsa.enc&lt;/code&gt;の4つのファイルが編集・生成されているため、これをsrcブランチにaddした上でcommitし、更にremoteとなっているgithubにpushします。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ git add .
$ git commit -am &lt;span class="s2"&gt;"Automate builds with Travis CI"&lt;/span&gt;
$ git push origin src
&lt;/pre&gt;


&lt;p&gt;これによりTravis CIの自動ビルドが実行されるはずなので、あとはブラウザからTravis CIのページを確認し、ビルドが通っているかを確認するのが良いでしょう。&lt;/p&gt;
&lt;h4&gt;上記設定以降の記事の追加方法&lt;/h4&gt;
&lt;p&gt;上記までで設定した方法によってsrcブランチが変更される度にTravis CIが&lt;code&gt;nikola build&lt;/code&gt;および&lt;code&gt;nikola github_deploy&lt;/code&gt;を行ってくれるようになったため、&lt;code&gt;posts&lt;/code&gt;ディレクトリ以下に新規記事を追加したら、あとはこの新規記事をsrcブランチに&lt;code&gt;git add posts/XX.md&lt;/code&gt;のように&lt;code&gt;git add&lt;/code&gt;した上で&lt;code&gt;git commit&lt;/code&gt;して、更にgithubに&lt;code&gt;git push origin src&lt;/code&gt;すれば自動的にブログがビルドされます。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;過去ポスト&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hiromasa.info/posts/1/"&gt;1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hiromasa.info/posts/2/"&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hiromasa.info/posts/3/"&gt;3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getnikola.com/blog/automating-nikola-rebuilds-with-travis-ci.html"&gt;Nikola公式の記事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>http://www.hiromasa.info/en/posts/6/</guid><pubDate>Sun, 15 Jul 2018 09:25:00 GMT</pubDate></item><item><title>nikolaでipynbファイルの公開設定を行う</title><link>http://www.hiromasa.info/en/posts/3/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h3&gt;Nikolaでipynbファイルを使用する方法&lt;/h3&gt;
&lt;p&gt;Nikolaでipynbファイルを使用する方法ですが、過去にdrillerさんが&lt;a href="https://qiita.com/driller/items/2f8a0dd66d4d8e59e05c"&gt;Qiitaに書かれた記事&lt;/a&gt;を参考に追加することが可能です。&lt;/p&gt;
&lt;p&gt;しかし、このままだとMathJaxが有効化されない、プロットした画像が描画されないなどの問題があったため、下記に簡単に対策を記載しておきます。&lt;/p&gt;
&lt;h4&gt;事前準備&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;conf.py&lt;/code&gt;の&lt;code&gt;POSTS&lt;/code&gt;と&lt;code&gt;PAGES&lt;/code&gt;に&lt;code&gt;ipynb&lt;/code&gt;用のエントリを追加しておきます。&lt;/p&gt;
&lt;h4&gt;ipynbファイルでのブログ記事新規作成&lt;/h4&gt;
&lt;p&gt;mdファイルでの作成と同じように&lt;code&gt;nikola new_post -f 形式&lt;/code&gt;で形式にipynbを指定すれば良いです。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_post -f ipynb
&lt;/pre&gt;


&lt;p&gt;記事タイトルを聞かれるので入力すると&lt;code&gt;posts&lt;/code&gt;ディレクトリ下にipynbファイルが生成されます。&lt;/p&gt;
&lt;h4&gt;既存ipynbファイルの使用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;posts&lt;/code&gt;ディレクトリ下に既存ipynbファイルを配置&lt;/li&gt;
&lt;li&gt;Jupyter Notebookで&lt;code&gt;Menu -&amp;gt; Edit -&amp;gt; Edit Notebook Metadata&lt;/code&gt;を選択&lt;/li&gt;
&lt;li&gt;下記のようなエントリを追加(最初の{...}は元々metadataに書かれていたエントリを省略したものです)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;{...&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;"nikola"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"python,pydata,numpy,scipy,librosa,scikit-learn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2018/2/28にPydata Osakaで'SciPyの概要と各モジュールの紹介'というタイトルで発表しました"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2018-06-16 14:3:00 UTC+09:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"slug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"category"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;ブログポストの構築&lt;/h4&gt;
&lt;p&gt;markdownのときと同じように&lt;code&gt;nikola build&lt;/code&gt;でブログを構築します。
&lt;code&gt;nikola serve&lt;/code&gt;でローカルでの確認を取ります。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola build
$ nikola serve -b
&lt;/pre&gt;


&lt;h4&gt;MathJaxの描画&lt;/h4&gt;
&lt;p&gt;上記までで記事の追加は可能なのですが、このままだとMathJaxによる数式が描画されません。
描画するためには下記の対処を行います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSPのdefault-srcに"https://cdnjs.cloudflare.com"を追加&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hiromasa.info/en/posts/3/2.md"&gt;過去記事&lt;/a&gt;でも触れたように&lt;code&gt;conf.py&lt;/code&gt;の&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;を編集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conf.py&lt;/code&gt;で無効化されている&lt;code&gt;MATHJAX_CONFIG&lt;/code&gt;のオプションをコメントアウトして有効化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者によってmathjaxがCDNから読み込まれるようになり、後者によって\$で囲われたインライン数式が描画されるようになります。(MathJaxはデフォルトでは\$によるインライン描画は有効化されていない)&lt;/p&gt;
&lt;h4&gt;画像、音声の読み込み&lt;/h4&gt;
&lt;p&gt;上記対策を行ってもipynbファイルに埋め込まれた画像、音声が描画されませんでした。これもCSPによってブロックされていたためです。対処としては、stackoverflowの&lt;a href="https://stackoverflow.com/questions/18447970/content-security-policy-data-not-working-for-base64-images-in-chrome-28"&gt;このQA&lt;/a&gt;を参考に、CSPのdefault-srcにdata:を追加(&lt;code&gt;conf.py&lt;/code&gt;の&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;を編集)することでipynbにbase64で埋め込まれたdata:imageやdata:audioが読み込まれるようになりました。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/driller/items/2f8a0dd66d4d8e59e05c"&gt;drillerさんのQiitaの記事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>http://www.hiromasa.info/en/posts/3/</guid><pubDate>Sat, 16 Jun 2018 05:00:00 GMT</pubDate></item><item><title>nikolaでCSP、Google Analytics、SNSボタンの設定を行う</title><link>http://www.hiromasa.info/en/posts/2/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;nikolaでCSP(Content Security Policy)の設定を行った上でGoogle Analyticsの設定を行い、またTwitter、Facebook、はてなブックマークボタンを設置したので下記に作業メモを書いておく。&lt;/p&gt;
&lt;h3&gt;Content Security Policy(CSP)の設定&lt;/h3&gt;
&lt;p&gt;CSPについての細かい説明はここでは書かないが、要はXSSを防ぐためにスクリプトや画像などのリソースをどのドメインからなら許容するかの設定である。
トラッキングコードやSNSボタンを設置する場合はこの設定を行う必要がある。設定していない場合はスクリプトや画像の読み込みが許可されないため、ボタンが表示されなかったりJavaScriptが動作しなかったりする。&lt;/p&gt;
&lt;h4&gt;設定方法&lt;/h4&gt;
&lt;p&gt;CSPの設定はHTTPヘッダで設定するかMETAタグを用いて設定することができる。
nikolaはstaticファイルを吐き出すgeneratorなので後者のMETAタグを用いた設定を行うこととなる。
METAタグによる設定はHEADタグの最初に書くべきであるが、nikolaではHEADタグの頭に書くようなオプションはないため、仕方なく&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;オプションにこのための設定を記述する。
実際に設定しているCSPの設定は下記の通りである。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_HEAD_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' http://*.google-analytics.com https://*.google-analytics.com https://code.jquery.com http://*.disqus.com https://disqus.com https://*.disqus.com https://*.disquscdn.com https://*.cloudinary.com http://www.gravatar.com https://www.googletagmanager.com https://*.twitter.com http://*.facebook.com https://*.facebook.com https://*.facebook.net http://*.hatena.ne.jp https://*.st-hatena.com;"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;基本的には"default-src"に対して'self'、'unsafe-inline'、および各ドメインに対する設定をhttpとhttpsに分けて記述している形になる。
'self'と'unsafe-inline'については&lt;a href="https://developers.google.com/web/fundamentals/security/csp/?hl=ja"&gt;GoogleのCSPに関するページ&lt;/a&gt;に記載があるが、
'self'は現在のオリジンを、'unsafe-inline'はインラインJavaScriptおよびCSSを許可するための記述である。
シングルクォーテーションで囲う必要があるため注意が必要である。
各種ドメインに関する設定については、下記にあるSNSボタン設置などの設定を行いつつ、開発者コンソールを眺めながらブロックされているドメインを一つ一つ許可する、といったような形で行った。&lt;/p&gt;
&lt;h4&gt;disqus対応&lt;/h4&gt;
&lt;p&gt;開発者コンソールで見るとコメントシステムとして使用しているdisqusに関してもローディングに関するエラーを吐いていたため、&lt;a href="https://blog.mornati.net/disqus-and-content-security-policy/"&gt;このリンク先&lt;/a&gt;を見た上でdisqusに関する記述も追加した。
リンク先ページにも記述があるように、evalを要求してくるような部分は上記CSP設定でもブロックされるが、これはdisqusによる広告の挿入のためであるとのことであるため、特に許可していない。&lt;/p&gt;
&lt;h3&gt;Google Analyticsの設定&lt;/h3&gt;
&lt;p&gt;Google Analyticsの設定はCSPと同様にHEADタグ内に書く必要があるため、&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;のオプションに追加で設定する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_HEAD_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!-- Global site tag (gtag.js) - Google Analytics --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script async src="https://www.googletagmanager.com/gtag/js?id=UA-48887105-1"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  window.dataLayer = window.dataLayer || [];&lt;/span&gt;
&lt;span class="s2"&gt;  function gtag(){dataLayer.push(arguments);}&lt;/span&gt;
&lt;span class="s2"&gt;  gtag('js', new Date());&lt;/span&gt;
&lt;span class="s2"&gt;  gtag('config', 'UA-XXXX');&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!-- End Google Analytics --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;ここでは従来使われていたトラッキング用のコードではなく、Google Tag Managerを使用するコードの記載としている。"UA-XXXX"のXXXXの部分は各自独自の設定に書き換える必要がある。&lt;/p&gt;
&lt;h3&gt;SNSボタンの設置&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getnikola.com/social_buttons.html"&gt;このページ&lt;/a&gt;に&lt;code&gt;SOCIAL_BUTTONS_CODE&lt;/code&gt;の設定にAddthisというSNSボタンをまとめて設置するためのサービスを使って設定する旨がデフォルトとして書かれているが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SOCIAL_BUTTONS_CODE&lt;/code&gt;はbody末尾に追加されるためレイアウト的に微妙な位置にボタン類が追加される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOCIAL_BUTTONS_CODE&lt;/code&gt;のオプションは&lt;a href="https://github.com/getnikola/nikola/issues/2840"&gt;このIssue&lt;/a&gt;で"Unneeded features"に分類されており、同じ用途であれば&lt;code&gt;BODY_END&lt;/code&gt;のオプションが使える&lt;/li&gt;
&lt;li&gt;SNSボタンだけでなくaddthisに関するCSP設定も必要となる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの理由から、結果として各サービスのSNSのボタンを個別に追加した方がトラブルを避けられたため、ここでは個別にどのように追加したかについて記載する。&lt;/p&gt;
&lt;h4&gt;SNSボタンの設定方法&lt;/h4&gt;
&lt;p&gt;前述のように&lt;code&gt;SOCIAL_BUTTONS_CODE&lt;/code&gt;のオプションは使わない。代わりに&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;のオプションを使用する。&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;は当初下記のような記述になっている。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CONTENT_FOOTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Contents &amp;amp;copy; {date}         &amp;lt;a href="&lt;/span&gt;&lt;span class="n"&gt;mailto&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;{author}&amp;lt;/a&amp;gt; - Powered by         &amp;lt;a href="&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;getnikola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="s2"&gt;" rel="&lt;/span&gt;&lt;span class="n"&gt;nofollow&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;Nikola&amp;lt;/a&amp;gt;         {license}"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;上記は設定年、著者名、Nikolaによる生成であることをfooterとして設定するための記述となっている。
&lt;code&gt;{date}&lt;/code&gt;や&lt;code&gt;{email}&lt;/code&gt;、&lt;code&gt;{author}&lt;/code&gt;など、埋め込み文字列のようになっている部分に気付くかもしれないが、
&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;オプションは&lt;code&gt;conf.py&lt;/code&gt;上では文字列テンプレートとなっており、format関数を用いてformattingされる。
format関数の引数としては、別途設定されているオプション&lt;code&gt;CONTENT_FOOTER_FORMATS&lt;/code&gt;が用いられる。
そのため、&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;中で&lt;code&gt;{&lt;/code&gt;や&lt;code&gt;}&lt;/code&gt;を用いる場合は、pythonのformat関数の仕様に合わせて&lt;code&gt;{{&lt;/code&gt;や&lt;code&gt;}}&lt;/code&gt;のように記述する必要があることに注意されたい。&lt;/p&gt;
&lt;p&gt;SNSボタン設定に関する記述は、&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;の後続する部分にタグを埋め込むことで行う。
最終的には下記のような記述となっている。facebookのscript部分の中括弧を'{{'と'}}'に変えている。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CONTENT_FOOTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""Contents &amp;amp;copy; {date}         &amp;lt;a href="mailto:{email}"&amp;gt;{author}&amp;lt;/a&amp;gt; - Powered by         &amp;lt;a href="https://getnikola.com" rel="nofollow"&amp;gt;Nikola&amp;lt;/a&amp;gt;         {license}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!-- twitter --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;a href="https://twitter.com/share?ref_src=twsrc&lt;/span&gt;&lt;span class="si"&gt;%5E&lt;/span&gt;&lt;span class="s2"&gt;tfw" class="twitter-share-button" data-show-count="false"&amp;gt;Tweet&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;lt;!-- facebook --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;div id="fb-root"&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script&amp;gt;(function(d, s, id) {{&lt;/span&gt;
&lt;span class="s2"&gt;  var js, fjs = d.getElementsByTagName(s)[0];&lt;/span&gt;
&lt;span class="s2"&gt;  if (d.getElementById(id)) return;&lt;/span&gt;
&lt;span class="s2"&gt;  js = d.createElement(s); js.id = id;&lt;/span&gt;
&lt;span class="s2"&gt;  js.src = 'https://connect.facebook.net/ja_JP/sdk.js#xfbml=1&amp;amp;version=v2.11';&lt;/span&gt;
&lt;span class="s2"&gt;  fjs.parentNode.insertBefore(js, fjs);&lt;/span&gt;
&lt;span class="s2"&gt;}}(document, 'script', 'facebook-jssdk'));&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;div class="fb-like" data-action="like" data-size="small" data-show-faces="true" data-share="true"&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;lt;!-- hatena --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;a href="http://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="basic-counter" title="このエントリーをはてなブックマークに追加"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;img src="https://b.st-hatena.com/images/entry-button/button-only@2x.png" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;各SNSボタン用コードの取得に関しては以下に記述する。実際の見た目については一番下までスクロールすれば見えると思われる。&lt;/p&gt;
&lt;h4&gt;twitter&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://publish.twitter.com/"&gt;publish.twitter.com&lt;/a&gt;でTwitter Buttonsを選び、続いてshare buttonを選ぶ。するとコードが表示されるので、これを&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;オプションに追加すれば良い。&lt;/p&gt;
&lt;h4&gt;facebook&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://developers.facebook.com/docs/plugins/like-button"&gt;いいね！ボタンの設定方法に関するページ&lt;/a&gt;のジェネレータで吐き出されたコードを使用する。
「いいね！」するURLは空白、レイアウトは"button"、アクションタイプは"like"、ボタンサイズは"small"、友達の顔は表示する、シェアボタンを追加、のチェックは共にOnにした状態でコードを取得し、そのコードを&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;オプションに追加した。&lt;/p&gt;
&lt;h5&gt;Open Graph対応&lt;/h5&gt;
&lt;p&gt;facebookのいいね・シェアボタンやGoogle Plusの+1ボタンなどが対応しているOpen Graphへの対応は&lt;code&gt;conf.py&lt;/code&gt;のオプションを有効化することによって実現できる。下記オプションをTrueに設定すると、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;USE_OPEN_GRAPH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;出力されるHTMLのheadタグ内に下記記述が追加される。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:site_name"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hiromasa.info"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nikolaでCSP、Google Analytics、SNSボタンの設定を行う"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.hiromasa.info/posts/2/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;description内のcontentの記述は省略したが、本文(主にh2など)から抽出した内容が記載される。
なお、&lt;code&gt;USE_OPEN_GRAPH&lt;/code&gt;のオプションは&lt;a href="https://github.com/getnikola/nikola/issues/2840"&gt;このIssue&lt;/a&gt;で"Unnecessary customization"扱いとなっており、将来的にデフォルトでTrueになっている(オプションから消失している)可能性がある。&lt;/p&gt;
&lt;h5&gt;facebookボタン位置の調整&lt;/h5&gt;
&lt;p&gt;ジェネレータが吐いたコードをそのまま使うと、facebookボタンが改行されてしまう。
これは単にblock要素であるdivを使っているためであるため、"fb-like"クラスと"fb-root"のidをinlineにするためのCSS設定を行うことでボタンが横並びになるように設定を行う。
また、横並びの配置にした場合においても、facebookのボタンの部分だけ下にずれてしまう。
この理由はボタンウィジェットに対するCSSの&lt;code&gt;vertical-align&lt;/code&gt;がbottomになっているせいである(&lt;a href="https://developers.google.com/web/fundamentals/security/csp/?hl=ja"&gt;参考&lt;/a&gt;)。
これを調整するためには&lt;code&gt;vertical-align&lt;/code&gt;をbaselineにしてやれば良い。
これらのCSS設定は&lt;code&gt;HEAD&lt;/code&gt;タグ内で設定する必要があるため、&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;オプションにstyleタグおよび設定を追加する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;EXTRA_HEAD_DATA = """
&lt;span class="c"&gt;&amp;lt;!-- for facebook button --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;fb-like&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;fb-root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;fb_iframe_widget&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;baseline&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
"""
&lt;/pre&gt;


&lt;h4&gt;はてなブックマークボタン&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://b.hatena.ne.jp/guide/bbutton"&gt;設置方法&lt;/a&gt;に従って出力されたコードをそのまま使用している。
ボタンのラベルは非表示、ブックマーク数は表示、保存するURLはページのURLを使う、に設定して取得したコードを&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;に追加している。&lt;/p&gt;
&lt;h3&gt;最終的な&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;上記の複数箇所で触れた&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;は最終的に以下のような形で記述している。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_HEAD_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' http://*.google-analytics.com https://*.google-analytics.com https://code.jquery.com http://*.disqus.com https://disqus.com https://*.disqus.com https://*.disquscdn.com https://*.cloudinary.com http://www.gravatar.com https://www.googletagmanager.com https://*.twitter.com http://*.facebook.com https://*.facebook.com https://*.facebook.net http://*.hatena.ne.jp https://*.st-hatena.com;"&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;lt;!-- Global site tag (gtag.js) - Google Analytics --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script async src="https://www.googletagmanager.com/gtag/js?id=UA-48887105-1"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  window.dataLayer = window.dataLayer || [];&lt;/span&gt;
&lt;span class="s2"&gt;  function gtag(){dataLayer.push(arguments);}&lt;/span&gt;
&lt;span class="s2"&gt;  gtag('js', new Date());&lt;/span&gt;
&lt;span class="s2"&gt;  gtag('config', 'UA-XXXX');&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!-- End Google Analytics --&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;lt;!-- for facebook button --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;.fb-like {&lt;/span&gt;
&lt;span class="s2"&gt;    display: inline;&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;#fb-root {&lt;/span&gt;
&lt;span class="s2"&gt;    display: inline;&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;.fb_iframe_widget &amp;gt; span {&lt;/span&gt;
&lt;span class="s2"&gt;    vertical-align: baseline !important; &lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CSP"&gt;Content Security Policyに関するMDNのページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>http://www.hiromasa.info/en/posts/2/</guid><pubDate>Sun, 14 Jan 2018 14:31:58 GMT</pubDate></item><item><title>Nikolaでブログ構築してGithub Pagesに設置</title><link>http://www.hiromasa.info/en/posts/1/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h3&gt;Nikolaとは&lt;/h3&gt;
&lt;p&gt;Python製のstatic site generator。python製だとpelicanの方が有名だがipynbが使えると聞いたのでこちらを使うことにした。&lt;/p&gt;
&lt;h3&gt;Nikolaでブログを生成&lt;/h3&gt;
&lt;h4&gt;インストール&lt;/h4&gt;
&lt;p&gt;pipでインストールできる。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ pip install nikola
$ pip install webassets
&lt;/pre&gt;


&lt;p&gt;後述するbuildの際などに下記のようなメッセージが出るので合わせてwebassetsもインストールしておくと良い。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;[2018-01-08T01:42:01Z] WARNING: Nikola: In order to USE_BUNDLES, you must install the "webassets" Python package.
[2018-01-08T01:42:01Z] WARNING: bundles: Setting USE_BUNDLES to False.
&lt;/pre&gt;


&lt;h4&gt;ブログの雛形生成&lt;/h4&gt;
&lt;p&gt;nikolaはgitのように&lt;code&gt;nikola サブコマンド&lt;/code&gt;の形式で様々なコマンドを実行できる。
雛形の生成のためには&lt;code&gt;nikola init&lt;/code&gt;を実行する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;nikola init blog_name
&lt;/pre&gt;


&lt;p&gt;これを実行するとCUIベースで対話的に様々な設定が可能。
commentシステムとして何を使うかを聞かれるが、後でconf.pyを書き換えれば設定が可能な模様であるため一旦は空白で良い。&lt;/p&gt;
&lt;p&gt;なお&lt;a href="https://getnikola.com/getting-started.html"&gt;Getting Started&lt;/a&gt;ではinitの際に引数に&lt;code&gt;--demo&lt;/code&gt;を付けているが、
この引数を付けるとデモ用コンテンツが生成されてしまうので普通に真っさらな状態で始めたいならば付けない方が良い。&lt;/p&gt;
&lt;h4&gt;新記事生成&lt;/h4&gt;
&lt;p&gt;新記事生成は下記の通り。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_post -f markdown  &lt;span class="c1"&gt;# formatを-fで指定(デフォルトはReStructuredText形式)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;実行すると記事タイトルを聞かれるので打ち込むと&lt;code&gt;-f&lt;/code&gt;で指定した形式のファイルがposts以下に生成される。
また、引数に&lt;code&gt;-e&lt;/code&gt;を付けるとそのままエディタでの編集画面となる。&lt;/p&gt;
&lt;p&gt;生成されたファイルの冒頭には下記のような形のヘッダーが付いている。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!--
.. title: Nikolaでブログ構築してGithub Pagesに設置
.. slug: 1
.. date: 2018-01-07 23:35:28 UTC+09:00
.. tags: nikola, python, github
.. category: 
.. link: 
.. description: 
.. type: text
--&amp;gt;
&lt;/pre&gt;


&lt;p&gt;titleは記事タイトルである。
slugはurlの一部となる文字列である。記事タイトルをアルファベットに直したものが記載されているが、適当に修正すると良い。1にしておくと&lt;code&gt;http://www.hiromasa.info/1/&lt;/code&gt;のようなURLとなる。&lt;/p&gt;
&lt;h4&gt;固定ページ生成&lt;/h4&gt;
&lt;p&gt;固定ページはpostではなくpageとして生成する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_page -f markdown pages/about
&lt;/pre&gt;


&lt;p&gt;生成した固定ページを上部ナビゲーションに配置する方法は下記のように&lt;code&gt;conf.py&lt;/code&gt;の&lt;code&gt;NAVIGATION_LINKS&lt;/code&gt;に書けば良い。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;NAVIGATION_LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/archive.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"文書一覧"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/categories/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"タグ"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/pages/about/index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"About"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/rss.xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"RSSフィード"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;ブログ構築&lt;/h4&gt;
&lt;p&gt;postやpageを上記のように生成しただけでは単なるテキストが生成されているだけなので、これらを元にブログを構築する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola build
&lt;/pre&gt;


&lt;p&gt;これでブログが構築される。
ローカルで確認するためには下記を実行する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola serve -b  &lt;span class="c1"&gt;# --browserでも良い&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;ブログテーマ設定&lt;/h4&gt;
&lt;p&gt;デフォルトはbootstrap3になるようであるが、他のものに変えたい場合は&lt;a href="https://themes.getnikola.com/"&gt;themes&lt;/a&gt;のページから好きなものを選ぶ。
ここでは&lt;a href="https://themes.getnikola.com/v7/libretto/"&gt;libretto&lt;/a&gt;のテーマを選んだ。
wordpressの同名テーマをベースにしたものらしい。&lt;/p&gt;
&lt;p&gt;テーマのインストールは下記の通り。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola theme -i libretto
&lt;/pre&gt;


&lt;p&gt;実行するとthemesディレクトリ以下にlibrettoのテーマがダウンロードされる。&lt;/p&gt;
&lt;p&gt;このテーマを使用するためには更にconf.pyを編集する必要がある。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Name of the theme to use.&lt;/span&gt;
&lt;span class="c1"&gt;# THEME = "bootstrap3"&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"libretto"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;この上で&lt;code&gt;nikola build&lt;/code&gt;を実行すれば更新後のテーマに変わっている。
記事の一文字目だけ大きく表示されるのが若干気に入らないがとりあえずこれで行く。&lt;/p&gt;
&lt;p&gt;※2017/1/8追記、librettoだとsyntax highlightが効かないようなのでbootstrap4のテーマに変えた&lt;/p&gt;
&lt;h3&gt;Github Pagesに配置&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getnikola.com/handbook.html#deployment"&gt;HandbookのDeployment&lt;/a&gt;の項を見るとGithubでホスティングする方法が記載されている。ここではGitHubのuser page(wrist.github.io)に配置することを考える。&lt;/p&gt;
&lt;h4&gt;1. gitリポジトリの設定を行う&lt;/h4&gt;
&lt;p&gt;過去にwrist.github.ioリポジトリを作成しているため、ブログのルートで&lt;code&gt;git init&lt;/code&gt;してからremoteを設定する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ git init
$ git remote add origin git@github.com:wrist/wrist.github.io
&lt;/pre&gt;


&lt;h4&gt;2. (必要であれば)conf.pyを編集する&lt;/h4&gt;
&lt;p&gt;必要であれば下記を編集する。今回は不要であるため特に変更していない。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# siteのソースがdeployされるブランチ名、srcが推奨とのこと&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_SOURCE_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'src'&lt;/span&gt;
&lt;span class="c1"&gt;# HTMLファイルがdeployされるブランチ、user pageの場合はmaster&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_DEPLOY_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'master'&lt;/span&gt;
&lt;span class="c1"&gt;# gitのremote名&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_REMOTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'origin'&lt;/span&gt;
&lt;span class="c1"&gt;# ソースブランチを自動的にコミットしプッシュするかの設定&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_COMMIT_SOURCE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;3. .gitignoreを追加&lt;/h4&gt;
&lt;p&gt;下記内容を.gitignoreに追加する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;cache
.doit.db
__pycache__
output
&lt;/pre&gt;


&lt;h4&gt;4. deploy用のコマンドを実行&lt;/h4&gt;
&lt;p&gt;下記コマンドを実行することでdeployが可能。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola github_deploy
&lt;/pre&gt;


&lt;p&gt;下記のように表示された場合は&lt;code&gt;pip install ghp-import2&lt;/code&gt;でghp-import2をインストールする。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;[2018-01-08T04:16:04Z] ERROR: Nikola: In order to deploy the site to GitHub Pages, you must install the "ghp-import2" Python package.
[2018-01-08T04:16:04Z] ERROR: Nikola: Exiting due to missing dependencies.
&lt;/pre&gt;


&lt;p&gt;通常はこれで改めて&lt;code&gt;nikola github_deploy&lt;/code&gt;を実行すれば終わりのはずである。
しかし、今回は過去に作成済の既にmasterが存在しているリポジトリにpushしようとしているため、当然先にfetchしろと警告が出て失敗する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;-01-08T04:17:10Z&lt;span class="o"&gt;]&lt;/span&gt; INFO: github_deploy: &lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ghp-import'&lt;/span&gt;, &lt;span class="s1"&gt;'-n'&lt;/span&gt;, &lt;span class="s1"&gt;'-m'&lt;/span&gt;, &lt;span class="s1"&gt;'Nikola auto commit.\n\nSource commit: a37690e35a31dc4a108f53c62b8ee17e783aa28f\nNikola version: 7.8.11'&lt;/span&gt;, &lt;span class="s1"&gt;'-p'&lt;/span&gt;, &lt;span class="s1"&gt;'-r'&lt;/span&gt;, &lt;span class="s1"&gt;'origin'&lt;/span&gt;, &lt;span class="s1"&gt;'-b'&lt;/span&gt;, &lt;span class="s1"&gt;'master'&lt;/span&gt;, &lt;span class="s1"&gt;'output'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
To github.com:wrist/wrist.github.io
 ! &lt;span class="o"&gt;[&lt;/span&gt;rejected&lt;span class="o"&gt;]&lt;/span&gt;        master -&amp;gt; master &lt;span class="o"&gt;(&lt;/span&gt;fetch first&lt;span class="o"&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class="s1"&gt;'git@github.com:wrist/wrist.github.io'&lt;/span&gt;
hint: Updates were rejected because the remote contains work that you &lt;span class="k"&gt;do&lt;/span&gt;
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: &lt;span class="o"&gt;(&lt;/span&gt;e.g., &lt;span class="s1"&gt;'git pull ...'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; before pushing again.
hint: See the &lt;span class="s1"&gt;'Note about fast-forwards'&lt;/span&gt; in &lt;span class="s1"&gt;'git push --help'&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; details.
&lt;/pre&gt;


&lt;p&gt;仕方ないので&lt;a href="https://rcmdnk.com/blog/2013/11/01/computer-git/"&gt;この記事&lt;/a&gt;に倣い、先にmasterを強制pushする。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ git push -f origin master
$ nikola github_deploy
&lt;/pre&gt;


&lt;p&gt;これにて無事に&lt;code&gt;http://wrist.github.io&lt;/code&gt;で閲覧できるようになった。&lt;/p&gt;
&lt;h4&gt;5. 独自ドメインでの使用&lt;/h4&gt;
&lt;p&gt;github pagesを独自ドメインで使用する場合にはCNAMEファイルを&lt;a href="https://qiita.com/nabettu/items/d11ac5ad42059626a687"&gt;リポジトリのルートに配置しておく必要がある&lt;/a&gt;が、このためにnikolaではソースブランチのfilesの下にCNAMEファイルを配置しておけば、これをbuild時にoutputディレクトリにコピーしてくれる。&lt;/p&gt;
&lt;h3&gt;コメントシステムの設置&lt;/h3&gt;
&lt;p&gt;init時には空白にしておいたコメントシステムを有効化する。
ここではdisqusを用いることにする。&lt;code&gt;conf.py&lt;/code&gt;に下記を追記する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;COMMENT_SYSTEM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"disqus"&lt;/span&gt;
&lt;span class="n"&gt;COMMENT_SYSTEM_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hiromasa-info"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;COMMENT_SYSTEM_ID&lt;/code&gt;はdisqusの場合はshortnameを設定する。
shortnameはdisqusのsiteのsettingsから確認できる。&lt;/p&gt;
&lt;h3&gt;その他&lt;/h3&gt;
&lt;p&gt;記事のデフォルト形式をmarkdownに変えたいが方法が分からないため&lt;a href="https://getnikola.com/handbook.html"&gt;Handbook&lt;/a&gt;を読んでもう少し調べる必要があるが、
ReStructuredTextで書くとExtensionとして&lt;a href="https://getnikola.com/handbook.html#restructuredtext-extensions"&gt;いくつかのdirectiveやroleが使える&lt;/a&gt;ようでもあるため、もう少し使ってみてから考えたい。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getnikola.com/handbook.html"&gt;Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/driller/items/4d998ca765717c7e0a6c"&gt;drillerさんによる基本的な使い方の記事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/driller/items/2f8a0dd66d4d8e59e05c"&gt;ipynb形式を扱う方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://iuk.hateblo.jp/entry/2016/10/27/024802"&gt;markdown周りの設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>http://www.hiromasa.info/en/posts/1/</guid><pubDate>Sun, 07 Jan 2018 14:35:28 GMT</pubDate></item></channel></rss>