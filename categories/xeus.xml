<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hiromasa.info (xeusについての記事)</title><link>http://www.hiromasa.info/</link><description></description><atom:link href="http://www.hiromasa.info/categories/xeus.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2021 &lt;a href="mailto:stoicheia1986@gmail.com"&gt;Hiromasa OHASHI&lt;/a&gt; </copyright><lastBuildDate>Fri, 18 Jun 2021 01:43:20 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Xeus関連の情報(PyData Osaka 2020/8/2用の記事)</title><link>http://www.hiromasa.info/posts/21/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h2&gt;Xeus関連の情報(PyData Osaka 2020/8/2用の記事)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最近のJupyter Blogから一部記事を抜粋して紹介します。&lt;/li&gt;
&lt;li&gt;Xeus関連の情報がメインです&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://blog.jupyter.org/xeus-is-now-a-jupyter-subproject-c4ec5a1bf30b"&gt;Xeus is now Jupyter subproject (2020/2/4)&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;Xeus&lt;/code&gt;とは&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Jupyter kernel protocolのC++実装&lt;ul&gt;
&lt;li&gt;ipykernelの代替として使用可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Xeus&lt;/code&gt;はカーネルではなくカーネルを作るためのライブラリ&lt;/li&gt;
&lt;li&gt;いくつかのカーネルは&lt;code&gt;Xeus&lt;/code&gt;を元に作られている&lt;ul&gt;
&lt;li&gt;下記はXeusメンテナたちによるもの&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter-xeus/xeus-cling"&gt;&lt;code&gt;xeus-cling&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;CERNのCling C++インタプリタベースのカーネル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter-xeus/xeus-python"&gt;&lt;code&gt;xeus-python&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;pythonインタプリタを埋め込んだpython用カーネル&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyterlab/debugger"&gt;@jupyterlab/debugger&lt;/a&gt;で用いられる&lt;code&gt;Jupyter debugger protocol&lt;/code&gt;を初めて実装(後述)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microsoft.github.io/debug-adapter-protocol/"&gt;Debug Adapter Protocol&lt;/a&gt;に対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jupyter-xeus/xeus-calc"&gt;&lt;code&gt;xeus-calc&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;電卓カーネル、Xeusの使い方を学ぶためのプロジェクト&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xeusプロジェクトとは関係なく作成されているカーネル&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JuniperKernel/JuniperKernel"&gt;&lt;code&gt;JuniperKernel&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;R用カーネル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/atomex-me/xeus-fift"&gt;&lt;code&gt;xeus-fift&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;fiftなるTelegramによって作られたTON blockchain contractのためのプログラミング言語向けカーネル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Slicer/SlicerJupyter"&gt;&lt;code&gt;SlicerJupyter&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Kitwareによる"Slicer"プロジェクトのQtイベントループと統合されたPython向けカーネル&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;code&gt;Xeus&lt;/code&gt;がJupyter管轄下へと移行した理由&lt;/h4&gt;
&lt;p&gt;以下に引用&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;While&lt;/span&gt; &lt;span class="nv"&gt;Xeus&lt;/span&gt; &lt;span class="nv"&gt;started&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;side&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;QuantStack&lt;/span&gt; &lt;span class="nv"&gt;engineers&lt;/span&gt;,
&lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt; &lt;span class="nv"&gt;now&lt;/span&gt; &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;several&lt;/span&gt; &lt;span class="nv"&gt;stakeholders&lt;/span&gt; &lt;span class="nv"&gt;who&lt;/span&gt; &lt;span class="nv"&gt;depend&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt;.
&lt;span class="nv"&gt;We&lt;/span&gt; &lt;span class="nv"&gt;think&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="nv"&gt;moving&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;open&lt;/span&gt; &lt;span class="nv"&gt;governance&lt;/span&gt; &lt;span class="nv"&gt;organization&lt;/span&gt; &lt;span class="nv"&gt;may&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;better&lt;/span&gt; &lt;span class="nv"&gt;way&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;reflect&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;situation&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;&lt;a href="https://blog.jupyter.org/a-visual-debugger-for-jupyter-914e61716559"&gt;A visual debugger for Jupyter (2020/3/26)&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;日本語の紹介記事&lt;ul&gt;
&lt;li&gt;https://www.publickey1.jp/blog/20/jupyterlab.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;概要&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Jupyter向けのvisual debuggerに関する紹介&lt;/li&gt;
&lt;li&gt;debuggerでできることの例&lt;ul&gt;
&lt;li&gt;ブレークポイントの設定(ノートブックのセルおよびソースファイル)&lt;/li&gt;
&lt;li&gt;変数一覧の表示&lt;/li&gt;
&lt;li&gt;コールスタックの表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リンク先のbinderから試しに実行可能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;インストール方法&lt;/h4&gt;
&lt;p&gt;フロントエンドとなるプラグインとバックエンドとなるカーネルが必要&lt;/p&gt;
&lt;h5&gt;フロントエンド&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ jupyter labextension install @jupyterlab/debugger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このデバッガフロントエンドは将来のリリースにおいてはデフォルトで同梱される予定。&lt;/p&gt;
&lt;h5&gt;バックエンド&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Jupyter Debug Protocol&lt;/code&gt;(次の節で説明)を実装したカーネルが必要&lt;ul&gt;
&lt;li&gt;このプロトコルを実装したカーネルはいまのところ&lt;code&gt;xeus-python&lt;/code&gt;のみ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ipykernelにデバッガプロトコルを実装するのはロードマップには存在&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda install xeus-python -c conda-forge
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;プラットフォームによってはPyPIのwheelsも使えるがまだ実験段階のもの&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;condaで試しにinstallして試してみたところxeus-pythonではmatplotlibがうまく扱えない模様&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/jupyter-xeus/xeus-python/issues/224&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Jupyter Debug Protocol&lt;/h4&gt;
&lt;h5&gt;ControlおよびIOPub Channelに対する新しいメッセージタイプ&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Jupyter kernelはプロセス間コミュニケーションプロトコル(https://jupyter-client.readthedocs.io/en/stable/messaging.html)に基づき動作&lt;ul&gt;
&lt;li&gt;Shellチャンネルはコード実行のリクエストなどのrequest/replyを行う&lt;/li&gt;
&lt;li&gt;IOPubチャンネルはkernelからclientへの片方向のチャンネル(標準出力やエラー出力で使用)&lt;/li&gt;
&lt;li&gt;ControlチャンネルはShellチャンネルに似ているが別ソケットで実行され、実行キューに溜めないhigh priorityなメッセージを扱う&lt;ul&gt;
&lt;li&gt;InterruptやShutdownリクエストなど&lt;/li&gt;
&lt;li&gt;debuggerに送られるコマンドに対してControlチャンネルを使うことに決めた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;protocolに2つのメッセージタイプを追加&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jupyter-client.readthedocs.io/en/latest/messaging.html#debug-request"&gt;debug_request/reply&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;breakpointの追加やコードに対するstep into操作などのdebuggerによって実行される特定のアクションのrequest&lt;/li&gt;
&lt;li&gt;Controlチャンネルに送られる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyter-client.readthedocs.io/en/latest/messaging.html#debug-event"&gt;debug_event&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;debugging kernelからフロントエンドに対して片方向に送られるdebug eventメッセージ&lt;/li&gt;
&lt;li&gt;IOPubチャンネルを通じて送られる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Debug Adapter Protocolの拡張&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Jupyterにおけるデザインのキーとなる原理としてプログラミング言語について不可知であるというものがある&lt;ul&gt;
&lt;li&gt;Jupyter debug protocolが他のカーネル実装に対しても適用できるものであることは重要である&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;標準的なプロトコルとしてMicrosoftの"Debug Adapter Protocol"(DAP)がある&lt;ul&gt;
&lt;li&gt;JSONベースのprotocolでありVSCode下で様々な言語のバックエンドとして既に動作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JupyterでDAPを用いることが自然であるが、Jupyterにおける要件を満たすためには十分ではない&lt;ul&gt;
&lt;li&gt;ページ再読み込みのサポートが必要&lt;ul&gt;
&lt;li&gt;Jupyter kernelはデバッガの状態(breakpointや現在どこでstopしているか)を後から接続したclientのために保持しなければならない&lt;/li&gt;
&lt;li&gt;フロントエンドはその状態を&lt;code&gt;debug_request&lt;/code&gt;メッセージで要求できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ソースファイルベースではないnotebookのcellとconsoleに対するデバッグのサポートが必要&lt;ul&gt;
&lt;li&gt;ブレークポイントを追加できるコードをdebuggerに送るためのメッセージが必要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;これらの変更は&lt;a href="https://github.com/jupyter/enhancement-proposals/pull/47"&gt;JEP&lt;/a&gt;として提案されている&lt;ul&gt;
&lt;li&gt;文書は&lt;a href="https://github.com/jupyter/enhancement-proposals/blob/master/jupyter-debugger-protocol/jupyter-debugger-protocol.md"&gt;こちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Xeus-python, the first Jupyter Kernel to support debugging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;XeusはC++はJupyter kernelプロトコルのC++実装&lt;ul&gt;
&lt;li&gt;それ自身がkernelではなくkernel作成を補助するlibrary&lt;/li&gt;
&lt;li&gt;CやC++ APIを持つ言語に対するカーネルを作成するのに便利&lt;ul&gt;
&lt;li&gt;Python、Lua、SQLなど&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xeus-pythonはdebugging protocolを実装する最初の実装として適切&lt;ul&gt;
&lt;li&gt;プラガブルなconcurrencyモデルを持っているためControlチャンネルを別スレッドで動作させることが可能&lt;/li&gt;
&lt;li&gt;上記を繰り返し動作させるために便利なサンドボックスを持つ軽量なコードベースを持つ&lt;ul&gt;
&lt;li&gt;ipykernelでdebuggingプロトコルを実装することはかなりのリファクタリングを要し早い段階でのconsensus buildingが必要となる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xeus-pythonのロードマップ&lt;ul&gt;
&lt;li&gt;ipykernelに対して失われているmagicを追加&lt;/li&gt;
&lt;li&gt;PyPI wheelsを改善&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;他のカーネルにおけるdebugging&lt;ul&gt;
&lt;li&gt;xeusベースのkernelについては大部分の実装が共有可能であるため例えばxeus-clingなどでは早期に使用可能となる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Diving into the debugger front-end architecture&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;jupyterlabのdebugger extensionはユーザーが典型的なIDEから予想するようなUIを含む&lt;ul&gt;
&lt;li&gt;サイドバーに変数エクスプローラ、ブレークポイントのリスト、ソースプレビュー、コールスタックを表示&lt;/li&gt;
&lt;li&gt;コードの横に直接ブレークポイントを設定できる(cell/console)&lt;/li&gt;
&lt;li&gt;現在コードのどの部分で停止しているかを示すヴィジュアルマーカー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;screencastで種々の機能を説明&lt;ul&gt;
&lt;li&gt;実行後に削除したセルに対するstep intoはread-only viewとして表示される&lt;/li&gt;
&lt;li&gt;コンソールおよびファイルに対してもデバッガは有効&lt;/li&gt;
&lt;li&gt;デバッグはノートブックレベルで実行されるため異なるノートブックに対して同時にデバッグを実行できる&lt;/li&gt;
&lt;li&gt;変数一覧はtree形式およびtable形式で閲覧可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Future developments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2020年の予定&lt;ul&gt;
&lt;li&gt;変数ビューワでmime type renderingのサポート&lt;/li&gt;
&lt;li&gt;条件付きブレークポイントのサポート&lt;/li&gt;
&lt;li&gt;debugger UXの向上&lt;/li&gt;
&lt;li&gt;Voilå dashboardのデバッグの有効化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://blog.jupyter.org/a-jupyter-kernel-for-sqlite-9549c5dcf551"&gt;A Jupyter Kernel for SQLite&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;概要&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;SQLite用jupyterカーネルの紹介&lt;ul&gt;
&lt;li&gt;SQLiteのシンタックスをcode cellで受け付ける&lt;/li&gt;
&lt;li&gt;magixコマンドでDBのオープンやクローズなどを行う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xeusを用いて作成&lt;ul&gt;
&lt;li&gt;wrapperの&lt;a href="https://github.com/SRombauts/SQLiteCpp"&gt;SQLiteCpp&lt;/a&gt;を使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;現在の状況&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;現在進行形で開発中だが下記を備えている&lt;ul&gt;
&lt;li&gt;SQLiteインタフェースに対する完全な機能&lt;/li&gt;
&lt;li&gt;高レベル操作のためのmagic&lt;ul&gt;
&lt;li&gt;DBの作成、オープン、クローズ、バックアップ&lt;/li&gt;
&lt;li&gt;テーブルの存在チェック、keyの設定および解除、それらの情報の取得&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;テーブル表示&lt;ul&gt;
&lt;li&gt;jupyter lab/notebookではHTMLで表示&lt;/li&gt;
&lt;li&gt;コンソールでは&lt;a href="https://github.com/p-ranav/tabulate"&gt;tabulate&lt;/a&gt;ライブラリを使って表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;future&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;直感的なデータ表示(plot, graph, chart, mapsなど)の描画&lt;ul&gt;
&lt;li&gt;Vegaを使えないかを検討中(ブログの画像を参照)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xeus-SQLiteとSQLiteライブラリのstaticビルドをバンドルしたシングルバイナリの供給&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;その他&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;binderで試しに実行可能(ブログ記事にリンク有)&lt;/li&gt;
&lt;li&gt;インストール方法&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mamba install xeus-sqlite -c conda-forge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda install xeus-sqlite -c conda-forge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TheSnakePit/mamba"&gt;mamba&lt;/a&gt;はcondaのc++による再実装らしい&lt;ul&gt;
&lt;li&gt;並列ダウンロードや高速な依存性解決を備えるとのこと&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="https://blog.jupyter.org/slicerjupyter-a-3d-slicer-kernel-for-interactive-publications-6f2ad829f635"&gt;SlicerJupyter: a 3D Slicer kernel for interactive publications&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;概要&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.slicer.org/"&gt;3D Slicer&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Qtを用いたC++で書かれたデスクトップアプリケーション&lt;ul&gt;
&lt;li&gt;医用画像の分析および可視化に使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3D描画に&lt;a href="https://vtk.org/"&gt;Visualization Toolkit(VTK)&lt;/a&gt;を用い、画像処理に&lt;a href="https://itk.org/"&gt;Insight Toolkit(ITK)&lt;/a&gt;を用いている&lt;/li&gt;
&lt;li&gt;pythonインタプリタが埋め込まれている&lt;/li&gt;
&lt;li&gt;xeus-pythonのインタプリタを統合すればQtベースのデスクトップアプリケーションがnotebookを通じて操作できることを紹介&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;githubの&lt;a href="https://github.com/Slicer/SlicerJupyter"&gt;SlicerJupyter&lt;/a&gt;に実装が存在&lt;ul&gt;
&lt;li&gt;BlenderやFreeCAD、ParaViewといったpythonが埋め込まれた他のアプリケーションに対しても拡張可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xeus-python integrationがJupyterのエコシステムとデスクトップアプリケーションの両方に対して必要不可欠&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Powerful Medical Imaging Capabilities Available Through Jupyter&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;3D Slicer(以下Slicer)は内蔵しているpythonインタプリタを通じてすべての機能をpyhonから操作可能&lt;ul&gt;
&lt;li&gt;pythonインタプリタに対する単純なコンソールは備えているがcellベースのインタラクティブ環境は備えていない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xeus-pythonを統合することによってSlicerのプロセスをJupyter kernelとして使用可能&lt;/li&gt;
&lt;li&gt;xeus-pythonは&lt;a href="https://github.com/InsightSoftwareConsortium/itkwidgets"&gt;itkwidgets&lt;/a&gt;のようなJupyter widgetsへのインタフェースとなるだけではなく、SlicerインタプリタのようなカスタムインタプリタやQtイベントループのようなGUIイベントループとも統合することが可能&lt;ul&gt;
&lt;li&gt;これによりSlicer内部表現であるMedical Reality Markup Language(MRML)の表現が可能となる&lt;/li&gt;
&lt;li&gt;ノートブック内でpandasやNumPy配列のようなpythonのエコシステムを通じて完全なmedical imaging APIとデータへとアクセスが可能となる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;対話的操作におけるレベル&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JupyterのWidget(sliderやボタンなど)をSlicer操作やデータ変更、処理やパラメータ可視化のために使える&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Widgetを通じた対話的操作は異なるレベルごとに実装されている&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Level1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jupyter Widgetがアプリケーション固有のオブジェクトを自動変換の上で表示&lt;/li&gt;
&lt;li&gt;例えばSlicer markup fiducial listはフォーマット済みのテーブルとして表示され、モデルnodeは3Dオブジェクトとして描画される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Level2&lt;ul&gt;
&lt;li&gt;Static image widgetがデスクトップアプリケーションが描画したコンテンツを描画&lt;/li&gt;
&lt;li&gt;これらのwidgetは追加された標準Widgetを用いてデータや描画パラメータが変更されることによって作成される&lt;/li&gt;
&lt;li&gt;様々なデータ型や非常に大きなデータセットなどの洗練された描画をJupyterから直接可能とする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Level3&lt;ul&gt;
&lt;li&gt;Dynamic viewer Widgetがデスクトップアプリケーションが描画した2D/3D viewをを描画&lt;/li&gt;
&lt;li&gt;マウス/キーボードのイベントがデスクトップアプリケーションへと送られズームや回転を実現&lt;ul&gt;
&lt;li&gt;アノテーションの付与、測定、画像分割のような3D対話操作をデスクトップアプリケーション上と同じように行える&lt;/li&gt;
&lt;li&gt;これは&lt;a href="https://ipycanvas.readthedocs.io/en/latest/"&gt;ipycanvas&lt;/a&gt;と&lt;a href="https://github.com/mwcraig/ipyevents"&gt;ipyevents&lt;/a&gt;パッケージを用いて実現される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Level4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全なGUI統合&lt;ul&gt;
&lt;li&gt;ユーザーはアプリケーションウインドウを標準デスクトップWidget(スライダーやメニューなど)を含めてノートブックセルの中から見ることができる&lt;/li&gt;
&lt;li&gt;これはSlicer Jupyterの中ではnoVNCとTigerVNCを用いて実現される&lt;/li&gt;
&lt;li&gt;リモートサーバー上でアプリケーションが実行されているときに便利&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;現在は大部分の実装については安定しているが、まだデザイン面での改善やパフォーマンスの改善の余地がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自動変換(display hookの複雑な実装による)&lt;/li&gt;
&lt;li&gt;xeus-pythonのスレッディングモデルはメインスレッドをロックしないように改良する余地がある&lt;/li&gt;
&lt;li&gt;Level3の統合におけるdynamic viewer widgetはより高いリフレッシュレート実現のためにパフォーマンス最適化の余地がある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;History of Slicer and this integration&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;QtベースのデスクトップアプリケーションによってXeusカーネルのイベントループが駆動されている？&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>jupyterlab</category><category>slicerjupyter</category><category>xeus</category><category>xeus-python</category><category>xeus-sqlite</category><guid>http://www.hiromasa.info/posts/21/</guid><pubDate>Sun, 02 Aug 2020 04:30:00 GMT</pubDate></item></channel></rss>