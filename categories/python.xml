<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hiromasa.info (pythonについての文書)</title><link>http://www.hiromasa.info/</link><description></description><atom:link href="http://www.hiromasa.info/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>ja</language><copyright>Contents © 2018 &lt;a href="mailto:stoicheia1986@gmail.com"&gt;Hiromasa OHASHI&lt;/a&gt; </copyright><lastBuildDate>Sun, 14 Jan 2018 16:32:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>nikolaでCSP、Google Analytics、SNSボタンの設定を行う</title><link>http://www.hiromasa.info/posts/2/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h3&gt;概要&lt;/h3&gt;
&lt;p&gt;nikolaでCSP(Content Security Policy)の設定を行った上でGoogle Analyticsの設定を行い、またTwitter、Facebook、はてなブックマークボタンを設置したので下記に作業メモを書いておく。&lt;/p&gt;
&lt;h3&gt;Content Security Policy(CSP)の設定&lt;/h3&gt;
&lt;p&gt;CSPについての細かい説明はここでは書かないが、要はXSSを防ぐためにスクリプトや画像などのリソースをどのドメインからなら許容するかの設定である。
トラッキングコードやSNSボタンを設置する場合はこの設定を行う必要がある。設定していない場合はスクリプトや画像の読み込みが許可されないため、ボタンが表示されなかったりJavaScriptが動作しなかったりする。&lt;/p&gt;
&lt;h4&gt;設定方法&lt;/h4&gt;
&lt;p&gt;CSPの設定はHTTPヘッダで設定するかMETAタグを用いて設定することができる。
nikolaはstaticファイルを吐き出すgeneratorなので後者のMETAタグを用いた設定を行うこととなる。
METAタグによる設定はHEADタグの最初に書くべきであるが、nikolaではHEADタグの頭に書くようなオプションはないため、仕方なく&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;オプションにこのための設定を記述する。
実際に設定しているCSPの設定は下記の通りである。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_HEAD_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' http://*.google-analytics.com https://*.google-analytics.com https://code.jquery.com http://*.disqus.com https://disqus.com https://*.disqus.com https://*.disquscdn.com https://*.cloudinary.com http://www.gravatar.com https://www.googletagmanager.com https://*.twitter.com http://*.facebook.com https://*.facebook.com https://*.facebook.net http://*.hatena.ne.jp https://*.st-hatena.com;"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;基本的には"default-src"に対して'self'、'unsafe-inline'、および各ドメインに対する設定をhttpとhttpsに分けて記述している形になる。
'self'と'unsafe-inline'については&lt;a href="https://developers.google.com/web/fundamentals/security/csp/?hl=ja"&gt;GoogleのCSPに関するページ&lt;/a&gt;に記載があるが、
'self'は現在のオリジンを、'unsafe-inline'はインラインJavaScriptおよびCSSを許可するための記述である。
シングルクォーテーションで囲う必要があるため注意が必要である。
各種ドメインに関する設定については、下記にあるSNSボタン設置などの設定を行いつつ、開発者コンソールを眺めながらブロックされているドメインを一つ一つ許可する、といったような形で行った。&lt;/p&gt;
&lt;h4&gt;disqus対応&lt;/h4&gt;
&lt;p&gt;開発者コンソールで見るとコメントシステムとして使用しているdisqusに関してもローディングに関するエラーを吐いていたため、&lt;a href="https://blog.mornati.net/disqus-and-content-security-policy/"&gt;このリンク先&lt;/a&gt;を見た上でdisqusに関する記述も追加した。
リンク先ページにも記述があるように、evalを要求してくるような部分は上記CSP設定でもブロックされるが、これはdisqusによる広告の挿入のためであるとのことであるため、特に許可していない。&lt;/p&gt;
&lt;h3&gt;Google Analyticsの設定&lt;/h3&gt;
&lt;p&gt;Google Analyticsの設定はCSPと同様にHEADタグ内に書く必要があるため、&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;のオプションに追加で設定する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_HEAD_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!-- Global site tag (gtag.js) - Google Analytics --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script async src="https://www.googletagmanager.com/gtag/js?id=UA-48887105-1"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  window.dataLayer = window.dataLayer || [];&lt;/span&gt;
&lt;span class="s2"&gt;  function gtag(){dataLayer.push(arguments);}&lt;/span&gt;
&lt;span class="s2"&gt;  gtag('js', new Date());&lt;/span&gt;
&lt;span class="s2"&gt;  gtag('config', 'UA-XXXX');&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!-- End Google Analytics --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;ここでは従来使われていたトラッキング用のコードではなく、Google Tag Managerを使用するコードの記載としている。"UA-XXXX"のXXXXの部分は各自独自の設定に書き換える必要がある。&lt;/p&gt;
&lt;h3&gt;SNSボタンの設置&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getnikola.com/social_buttons.html"&gt;このページ&lt;/a&gt;に&lt;code&gt;SOCIAL_BUTTONS_CODE&lt;/code&gt;の設定にAddthisというSNSボタンをまとめて設置するためのサービスを使って設定する旨がデフォルトとして書かれているが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SOCIAL_BUTTONS_CODE&lt;/code&gt;はbody末尾に追加されるためレイアウト的に微妙な位置にボタン類が追加される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOCIAL_BUTTONS_CODE&lt;/code&gt;のオプションは&lt;a href="https://github.com/getnikola/nikola/issues/2840"&gt;このIssue&lt;/a&gt;で"Unneeded features"に分類されており、同じ用途であれば&lt;code&gt;BODY_END&lt;/code&gt;のオプションが使える&lt;/li&gt;
&lt;li&gt;SNSボタンだけでなくaddthisに関するCSP設定も必要となる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの理由から、結果として各サービスのSNSのボタンを個別に追加した方がトラブルを避けられたため、ここでは個別にどのように追加したかについて記載する。&lt;/p&gt;
&lt;h4&gt;SNSボタンの設定方法&lt;/h4&gt;
&lt;p&gt;前述のように&lt;code&gt;SOCIAL_BUTTONS_CODE&lt;/code&gt;のオプションは使わない。代わりに&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;のオプションを使用する。&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;は当初下記のような記述になっている。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CONTENT_FOOTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Contents &amp;amp;copy; {date}         &amp;lt;a href="&lt;/span&gt;&lt;span class="n"&gt;mailto&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;{author}&amp;lt;/a&amp;gt; - Powered by         &amp;lt;a href="&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;getnikola&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="s2"&gt;" rel="&lt;/span&gt;&lt;span class="n"&gt;nofollow&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;Nikola&amp;lt;/a&amp;gt;         {license}"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;上記は設定年、著者名、Nikolaによる生成であることをfooterとして設定するための記述となっている。
&lt;code&gt;{date}&lt;/code&gt;や&lt;code&gt;{email}&lt;/code&gt;、&lt;code&gt;{author}&lt;/code&gt;など、埋め込み文字列のようになっている部分に気付くかもしれないが、
&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;オプションは&lt;code&gt;conf.py&lt;/code&gt;上では文字列テンプレートとなっており、format関数を用いてformattingされる。
format関数の引数としては、別途設定されているオプション&lt;code&gt;CONTENT_FOOTER_FORMATS&lt;/code&gt;が用いられる。
そのため、&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;中で&lt;code&gt;{&lt;/code&gt;や&lt;code&gt;}&lt;/code&gt;を用いる場合は、pythonのformat関数の仕様に合わせて&lt;code&gt;{{&lt;/code&gt;や&lt;code&gt;}}&lt;/code&gt;のように記述する必要があることに注意されたい。&lt;/p&gt;
&lt;p&gt;SNSボタン設定に関する記述は、&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;の後続する部分にタグを埋め込むことで行う。
最終的には下記のような記述となっている。facebookのscript部分の中括弧を'{{'と'}}'に変えている。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CONTENT_FOOTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""Contents &amp;amp;copy; {date}         &amp;lt;a href="mailto:{email}"&amp;gt;{author}&amp;lt;/a&amp;gt; - Powered by         &amp;lt;a href="https://getnikola.com" rel="nofollow"&amp;gt;Nikola&amp;lt;/a&amp;gt;         {license}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!-- twitter --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;a href="https://twitter.com/share?ref_src=twsrc&lt;/span&gt;&lt;span class="si"&gt;%5E&lt;/span&gt;&lt;span class="s2"&gt;tfw" class="twitter-share-button" data-show-count="false"&amp;gt;Tweet&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;lt;!-- facebook --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;div id="fb-root"&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script&amp;gt;(function(d, s, id) {{&lt;/span&gt;
&lt;span class="s2"&gt;  var js, fjs = d.getElementsByTagName(s)[0];&lt;/span&gt;
&lt;span class="s2"&gt;  if (d.getElementById(id)) return;&lt;/span&gt;
&lt;span class="s2"&gt;  js = d.createElement(s); js.id = id;&lt;/span&gt;
&lt;span class="s2"&gt;  js.src = 'https://connect.facebook.net/ja_JP/sdk.js#xfbml=1&amp;amp;version=v2.11';&lt;/span&gt;
&lt;span class="s2"&gt;  fjs.parentNode.insertBefore(js, fjs);&lt;/span&gt;
&lt;span class="s2"&gt;}}(document, 'script', 'facebook-jssdk'));&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;div class="fb-like" data-action="like" data-size="small" data-show-faces="true" data-share="true"&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;lt;!-- hatena --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;a href="http://b.hatena.ne.jp/entry/" class="hatena-bookmark-button" data-hatena-bookmark-layout="basic-counter" title="このエントリーをはてなブックマークに追加"&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;img src="https://b.st-hatena.com/images/entry-button/button-only@2x.png" alt="このエントリーをはてなブックマークに追加" width="20" height="20" style="border: none;" /&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script type="text/javascript" src="https://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;各SNSボタン用コードの取得に関しては以下に記述する。実際の見た目については一番下までスクロールすれば見えると思われる。&lt;/p&gt;
&lt;h4&gt;twitter&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://publish.twitter.com/"&gt;publish.twitter.com&lt;/a&gt;でTwitter Buttonsを選び、続いてshare buttonを選ぶ。するとコードが表示されるので、これを&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;オプションに追加すれば良い。&lt;/p&gt;
&lt;h4&gt;facebook&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://developers.facebook.com/docs/plugins/like-button"&gt;いいね！ボタンの設定方法に関するページ&lt;/a&gt;のジェネレータで吐き出されたコードを使用する。
「いいね！」するURLは空白、レイアウトは"button"、アクションタイプは"like"、ボタンサイズは"small"、友達の顔は表示する、シェアボタンを追加、のチェックは共にOnにした状態でコードを取得し、そのコードを&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;オプションに追加した。&lt;/p&gt;
&lt;h5&gt;Open Graph対応&lt;/h5&gt;
&lt;p&gt;facebookのいいね・シェアボタンやGoogle Plusの+1ボタンなどが対応しているOpen Graphへの対応は&lt;code&gt;conf.py&lt;/code&gt;のオプションを有効化することによって実現できる。下記オプションをTrueに設定すると、&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;USE_OPEN_GRAPH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;出力されるHTMLのheadタグ内に下記記述が追加される。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:site_name"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hiromasa.info"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nikolaでCSP、Google Analytics、SNSボタンの設定を行う"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.hiromasa.info/posts/2/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;description内のcontentの記述は省略したが、本文(主にh2など)から抽出した内容が記載される。
なお、&lt;code&gt;USE_OPEN_GRAPH&lt;/code&gt;のオプションは&lt;a href="https://github.com/getnikola/nikola/issues/2840"&gt;このIssue&lt;/a&gt;で"Unnecessary customization"扱いとなっており、将来的にデフォルトでTrueになっている(オプションから消失している)可能性がある。&lt;/p&gt;
&lt;h5&gt;facebookボタン位置の調整&lt;/h5&gt;
&lt;p&gt;ジェネレータが吐いたコードをそのまま使うと、facebookボタンが改行されてしまう。
これは単にblock要素であるdivを使っているためであるため、"fb-like"クラスと"fb-root"のidをinlineにするためのCSS設定を行うことでボタンが横並びになるように設定を行う。
また、横並びの配置にした場合においても、facebookのボタンの部分だけ下にずれてしまう。
この理由はボタンウィジェットに対するCSSの&lt;code&gt;vertical-align&lt;/code&gt;がbottomになっているせいである(&lt;a href="https://developers.google.com/web/fundamentals/security/csp/?hl=ja"&gt;参考&lt;/a&gt;)。
これを調整するためには&lt;code&gt;vertical-align&lt;/code&gt;をbaselineにしてやれば良い。
これらのCSS設定は&lt;code&gt;HEAD&lt;/code&gt;タグ内で設定する必要があるため、&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;オプションにstyleタグおよび設定を追加する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;EXTRA_HEAD_DATA = """
&lt;span class="c"&gt;&amp;lt;!-- for facebook button --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;fb-like&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;fb-root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;fb_iframe_widget&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;baseline&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
"""
&lt;/pre&gt;


&lt;h4&gt;はてなブックマークボタン&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://b.hatena.ne.jp/guide/bbutton"&gt;設置方法&lt;/a&gt;に従って出力されたコードをそのまま使用している。
ボタンのラベルは非表示、ブックマーク数は表示、保存するURLはページのURLを使う、に設定して取得したコードを&lt;code&gt;CONTENT_FOOTER&lt;/code&gt;に追加している。&lt;/p&gt;
&lt;h3&gt;最終的な&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;上記の複数箇所で触れた&lt;code&gt;EXTRA_HEAD_DATA&lt;/code&gt;は最終的に以下のような形で記述している。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_HEAD_DATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="default-src 'self' 'unsafe-inline' http://*.google-analytics.com https://*.google-analytics.com https://code.jquery.com http://*.disqus.com https://disqus.com https://*.disqus.com https://*.disquscdn.com https://*.cloudinary.com http://www.gravatar.com https://www.googletagmanager.com https://*.twitter.com http://*.facebook.com https://*.facebook.com https://*.facebook.net http://*.hatena.ne.jp https://*.st-hatena.com;"&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;lt;!-- Global site tag (gtag.js) - Google Analytics --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script async src="https://www.googletagmanager.com/gtag/js?id=UA-48887105-1"&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  window.dataLayer = window.dataLayer || [];&lt;/span&gt;
&lt;span class="s2"&gt;  function gtag(){dataLayer.push(arguments);}&lt;/span&gt;
&lt;span class="s2"&gt;  gtag('js', new Date());&lt;/span&gt;
&lt;span class="s2"&gt;  gtag('config', 'UA-XXXX');&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;!-- End Google Analytics --&amp;gt;&lt;/span&gt;

&lt;span class="s2"&gt;&amp;lt;!-- for facebook button --&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;.fb-like {&lt;/span&gt;
&lt;span class="s2"&gt;    display: inline;&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;#fb-root {&lt;/span&gt;
&lt;span class="s2"&gt;    display: inline;&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;.fb_iframe_widget &amp;gt; span {&lt;/span&gt;
&lt;span class="s2"&gt;    vertical-align: baseline !important; &lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CSP"&gt;Content Security Policyに関するMDNのページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>nikola</category><category>python</category><guid>http://www.hiromasa.info/posts/2/</guid><pubDate>Sun, 14 Jan 2018 14:31:58 GMT</pubDate></item><item><title>Nikolaでブログ構築してGithub Pagesに設置</title><link>http://www.hiromasa.info/posts/1/</link><dc:creator>Hiromasa OHASHI</dc:creator><description>&lt;div&gt;&lt;h3&gt;Nikolaとは&lt;/h3&gt;
&lt;p&gt;Python製のstatic site generator。python製だとpelicanの方が有名だがipynbが使えると聞いたのでこちらを使うことにした。&lt;/p&gt;
&lt;h3&gt;Nikolaでブログを生成&lt;/h3&gt;
&lt;h4&gt;インストール&lt;/h4&gt;
&lt;p&gt;pipでインストールできる。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ pip install nikola
$ pip install webassets
&lt;/pre&gt;


&lt;p&gt;後述するbuildの際などに下記のようなメッセージが出るので合わせてwebassetsもインストールしておくと良い。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;[2018-01-08T01:42:01Z] WARNING: Nikola: In order to USE_BUNDLES, you must install the "webassets" Python package.
[2018-01-08T01:42:01Z] WARNING: bundles: Setting USE_BUNDLES to False.
&lt;/pre&gt;


&lt;h4&gt;ブログの雛形生成&lt;/h4&gt;
&lt;p&gt;nikolaはgitのように&lt;code&gt;nikola サブコマンド&lt;/code&gt;の形式で様々なコマンドを実行できる。
雛形の生成のためには&lt;code&gt;nikola init&lt;/code&gt;を実行する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;nikola init blog_name
&lt;/pre&gt;


&lt;p&gt;これを実行するとCUIベースで対話的に様々な設定が可能。
commentシステムとして何を使うかを聞かれるが、後でconf.pyを書き換えれば設定が可能な模様であるため一旦は空白で良い。&lt;/p&gt;
&lt;p&gt;なお&lt;a href="https://getnikola.com/getting-started.html"&gt;Getting Started&lt;/a&gt;ではinitの際に引数に&lt;code&gt;--demo&lt;/code&gt;を付けているが、
この引数を付けるとデモ用コンテンツが生成されてしまうので普通に真っさらな状態で始めたいならば付けない方が良い。&lt;/p&gt;
&lt;h4&gt;新記事生成&lt;/h4&gt;
&lt;p&gt;新記事生成は下記の通り。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_post -f markdown  &lt;span class="c1"&gt;# formatを-fで指定(デフォルトはReStructuredText形式)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;実行すると記事タイトルを聞かれるので打ち込むと&lt;code&gt;-f&lt;/code&gt;で指定した形式のファイルがposts以下に生成される。
また、引数に&lt;code&gt;-e&lt;/code&gt;を付けるとそのままエディタでの編集画面となる。&lt;/p&gt;
&lt;p&gt;生成されたファイルの冒頭には下記のような形のヘッダーが付いている。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!--
.. title: Nikolaでブログ構築してGithub Pagesに設置
.. slug: 1
.. date: 2018-01-07 23:35:28 UTC+09:00
.. tags: nikola, python, github
.. category: 
.. link: 
.. description: 
.. type: text
--&amp;gt;
&lt;/pre&gt;


&lt;p&gt;titleは記事タイトルである。
slugはurlの一部となる文字列である。記事タイトルをアルファベットに直したものが記載されているが、適当に修正すると良い。1にしておくと&lt;code&gt;http://www.hiromasa.info/1/&lt;/code&gt;のようなURLとなる。&lt;/p&gt;
&lt;h4&gt;固定ページ生成&lt;/h4&gt;
&lt;p&gt;固定ページはpostではなくpageとして生成する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola new_page -f markdown pages/about
&lt;/pre&gt;


&lt;p&gt;生成した固定ページを上部ナビゲーションに配置する方法は下記のように&lt;code&gt;conf.py&lt;/code&gt;の&lt;code&gt;NAVIGATION_LINKS&lt;/code&gt;に書けば良い。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;NAVIGATION_LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/archive.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"文書一覧"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/categories/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"タグ"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/pages/about/index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"About"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/rss.xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"RSSフィード"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;ブログ構築&lt;/h4&gt;
&lt;p&gt;postやpageを上記のように生成しただけでは単なるテキストが生成されているだけなので、これらを元にブログを構築する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola build
&lt;/pre&gt;


&lt;p&gt;これでブログが構築される。
ローカルで確認するためには下記を実行する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola serve -b  &lt;span class="c1"&gt;# --browserでも良い&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;ブログテーマ設定&lt;/h4&gt;
&lt;p&gt;デフォルトはbootstrap3になるようであるが、他のものに変えたい場合は&lt;a href="https://themes.getnikola.com/"&gt;themes&lt;/a&gt;のページから好きなものを選ぶ。
ここでは&lt;a href="https://themes.getnikola.com/v7/libretto/"&gt;libretto&lt;/a&gt;のテーマを選んだ。
wordpressの同名テーマをベースにしたものらしい。&lt;/p&gt;
&lt;p&gt;テーマのインストールは下記の通り。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola thme -i libretto
&lt;/pre&gt;


&lt;p&gt;実行するとthemesディレクトリ以下にlibrettoのテーマがダウンロードされる。&lt;/p&gt;
&lt;p&gt;このテーマを使用するためには更にconf.pyを編集する必要がある。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Name of the theme to use.&lt;/span&gt;
&lt;span class="c1"&gt;# THEME = "bootstrap3"&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"libretto"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;この上で&lt;code&gt;nikola build&lt;/code&gt;を実行すれば更新後のテーマに変わっている。
記事の一文字目だけ大きく表示されるのが若干気に入らないがとりあえずこれで行く。&lt;/p&gt;
&lt;p&gt;※2017/1/8追記、librettoだとsyntax highlightが効かないようなのでbootstrap4のテーマに変えた&lt;/p&gt;
&lt;h3&gt;Github Pagesに配置&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://getnikola.com/handbook.html#deployment"&gt;HandbookのDeployment&lt;/a&gt;の項を見るとGithubでホスティングする方法が記載されている。ここではGitHubのuser page(wrist.github.io)に配置することを考える。&lt;/p&gt;
&lt;h4&gt;1. gitリポジトリの設定を行う&lt;/h4&gt;
&lt;p&gt;過去にwrist.github.ioリポジトリを作成しているため、ブログのルートで&lt;code&gt;git init&lt;/code&gt;してからremoteを設定する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ git init
$ git remote add origin git@github.com:wrist/wrist.github.io
&lt;/pre&gt;


&lt;h4&gt;2. (必要であれば)conf.pyを編集する&lt;/h4&gt;
&lt;p&gt;必要であれば下記を編集する。今回は不要であるため特に変更していない。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# siteのソースがdeployされるブランチ名、srcが推奨とのこと&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_SOURCE_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'src'&lt;/span&gt;
&lt;span class="c1"&gt;# HTMLファイルがdeployされるブランチ、user pageの場合はmaster&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_DEPLOY_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'master'&lt;/span&gt;
&lt;span class="c1"&gt;# gitのremote名&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_REMOTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'origin'&lt;/span&gt;
&lt;span class="c1"&gt;# ソースブランチを自動的にコミットしプッシュするかの設定&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_COMMIT_SOURCE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;3. .gitignoreを追加&lt;/h4&gt;
&lt;p&gt;下記内容を.gitignoreに追加する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;cache
.doit.db
__pycache__
output
&lt;/pre&gt;


&lt;h4&gt;4. deploy用のコマンドを実行&lt;/h4&gt;
&lt;p&gt;下記コマンドを実行することでdeployが可能。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ nikola github_deploy
&lt;/pre&gt;


&lt;p&gt;下記のように表示された場合は&lt;code&gt;pip install ghp-import2&lt;/code&gt;でghp-import2をインストールする。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;[2018-01-08T04:16:04Z] ERROR: Nikola: In order to deploy the site to GitHub Pages, you must install the "ghp-import2" Python package.
[2018-01-08T04:16:04Z] ERROR: Nikola: Exiting due to missing dependencies.
&lt;/pre&gt;


&lt;p&gt;通常はこれで改めて&lt;code&gt;nikola github_deploy&lt;/code&gt;を実行すれば終わりのはずである。
しかし、今回は過去に作成済の既にmasterが存在しているリポジトリにpushしようとしているため、当然先にfetchしろと警告が出て失敗する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;-01-08T04:17:10Z&lt;span class="o"&gt;]&lt;/span&gt; INFO: github_deploy: &lt;span class="o"&gt;==&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ghp-import'&lt;/span&gt;, &lt;span class="s1"&gt;'-n'&lt;/span&gt;, &lt;span class="s1"&gt;'-m'&lt;/span&gt;, &lt;span class="s1"&gt;'Nikola auto commit.\n\nSource commit: a37690e35a31dc4a108f53c62b8ee17e783aa28f\nNikola version: 7.8.11'&lt;/span&gt;, &lt;span class="s1"&gt;'-p'&lt;/span&gt;, &lt;span class="s1"&gt;'-r'&lt;/span&gt;, &lt;span class="s1"&gt;'origin'&lt;/span&gt;, &lt;span class="s1"&gt;'-b'&lt;/span&gt;, &lt;span class="s1"&gt;'master'&lt;/span&gt;, &lt;span class="s1"&gt;'output'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
To github.com:wrist/wrist.github.io
 ! &lt;span class="o"&gt;[&lt;/span&gt;rejected&lt;span class="o"&gt;]&lt;/span&gt;        master -&amp;gt; master &lt;span class="o"&gt;(&lt;/span&gt;fetch first&lt;span class="o"&gt;)&lt;/span&gt;
error: failed to push some refs to &lt;span class="s1"&gt;'git@github.com:wrist/wrist.github.io'&lt;/span&gt;
hint: Updates were rejected because the remote contains work that you &lt;span class="k"&gt;do&lt;/span&gt;
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: &lt;span class="o"&gt;(&lt;/span&gt;e.g., &lt;span class="s1"&gt;'git pull ...'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; before pushing again.
hint: See the &lt;span class="s1"&gt;'Note about fast-forwards'&lt;/span&gt; in &lt;span class="s1"&gt;'git push --help'&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; details.
&lt;/pre&gt;


&lt;p&gt;仕方ないので&lt;a href="https://rcmdnk.com/blog/2013/11/01/computer-git/"&gt;この記事&lt;/a&gt;に倣い、先にmasterを強制pushする。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ git push -f origin master
$ nikola github_deploy
&lt;/pre&gt;


&lt;p&gt;これにて無事に&lt;code&gt;http://wrist.github.io&lt;/code&gt;で閲覧できるようになった。&lt;/p&gt;
&lt;h4&gt;5. 独自ドメインでの使用&lt;/h4&gt;
&lt;p&gt;github pagesを独自ドメインで使用する場合にはCNAMEファイルを&lt;a href="https://qiita.com/nabettu/items/d11ac5ad42059626a687"&gt;リポジトリのルートに配置しておく必要がある&lt;/a&gt;が、このためにnikolaではソースブランチのfilesの下にCNAMEファイルを配置しておけば、これをbuild時にoutputディレクトリにコピーしてくれる。&lt;/p&gt;
&lt;h3&gt;コメントシステムの設置&lt;/h3&gt;
&lt;p&gt;init時には空白にしておいたコメントシステムを有効化する。
ここではdisqusを用いることにする。&lt;code&gt;conf.py&lt;/code&gt;に下記を追記する。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;COMMENT_SYSTEM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"disqus"&lt;/span&gt;
&lt;span class="n"&gt;COMMENT_SYSTEM_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hiromasa-info"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;COMMENT_SYSTEM_ID&lt;/code&gt;はdisqusの場合はshortnameを設定する。
shortnameはdisqusのsiteのsettingsから確認できる。&lt;/p&gt;
&lt;h3&gt;その他&lt;/h3&gt;
&lt;p&gt;記事のデフォルト形式をmarkdownに変えたいが方法が分からないため&lt;a href="https://getnikola.com/handbook.html"&gt;Handbook&lt;/a&gt;を読んでもう少し調べる必要があるが、
ReStructuredTextで書くとExtensionとして&lt;a href="https://getnikola.com/handbook.html#restructuredtext-extensions"&gt;いくつかのdirectiveやroleが使える&lt;/a&gt;ようでもあるため、もう少し使ってみてから考えたい。&lt;/p&gt;
&lt;h3&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getnikola.com/handbook.html"&gt;Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/driller/items/4d998ca765717c7e0a6c"&gt;drillerさんによる基本的な使い方の記事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/driller/items/2f8a0dd66d4d8e59e05c"&gt;ipynb形式を扱う方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://iuk.hateblo.jp/entry/2016/10/27/024802"&gt;markdown周りの設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>github</category><category>nikola</category><category>python</category><guid>http://www.hiromasa.info/posts/1/</guid><pubDate>Sun, 07 Jan 2018 14:35:28 GMT</pubDate></item></channel></rss>