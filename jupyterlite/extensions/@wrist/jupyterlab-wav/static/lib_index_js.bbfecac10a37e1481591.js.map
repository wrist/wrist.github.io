{"version":3,"file":"lib_index_js.bbfecac10a37e1481591.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAA2D;AACpB;AACiC;AACM;AAC9C;AAChC;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAQ;AAC5C,4BAA4B,+CAAQ;AACpC;AACA;AACA;AACA;AACA,0BAA0B,6CAAM;AAChC,6BAA6B,6CAAM;AACnC,oCAAoC,6CAAM;AAC1C,iCAAiC,6CAAM;AACvC;AACA;AACA,mBAAmB,+CAAQ;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA,oCAAoC,2DAAiB;AACrD;AACA;AACA;AACA;AACA;AACA,oBAAoB,8FAAe;AACnC;AACA,qBAAqB;AACrB,oBAAoB,iGAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,0DAAmB,UAAU,SAAS,iBAAiB;AACnE,QAAQ,0DAAmB,UAAU,2CAA2C;AAChF,QAAQ,0DAAmB,UAAU,uCAAuC;AAC5E,QAAQ,0DAAmB,UAAU,iDAAiD;AACtF,QAAQ,0DAAmB,aAAa;AACxC;AACA,eAAe;AACf;AACA;AACA;AACA,QAAQ,0DAAmB;AAC3B;AACA;AACA;AACA,QAAQ,0DAAmB,UAAU,YAAY;AACjD,YAAY,0DAAmB,YAAY,6HAA6H,iBAAiB;AACzL;AACA;AACA;AACA;AACA,iEAAe,cAAc,EAAC;AAC9B;;;;;;;;;;;;;;;;AChKqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,mCAAmC,8CAAS;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;AACzB;;;;;;;;;;;;;;;;;;;AClDmD;AACzB;AACoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,6DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB,SAAS,KAAK;AAC1D;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAmB,CAAC,uDAAc,IAAI,gBAAgB;AACrE;AACA;AACA","sources":["webpack://@wrist/jupyterlab-wav/./lib/AudioComponent.js","webpack://@wrist/jupyterlab-wav/./lib/index.js","webpack://@wrist/jupyterlab-wav/./lib/widget.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport WaveSurfer from 'wavesurfer.js';\nimport TimeLine from 'wavesurfer.js/dist/plugin/wavesurfer.timeline.js';\nimport Spectrogram from 'wavesurfer.js/dist/plugin/wavesurfer.spectrogram.js';\nimport colormap from 'colormap';\n/**\n * @returns The React component\n */\nconst AudioComponent = (props) => {\n    const zoomRange = { min: 1, max: 30000, initial: 1 };\n    const fftSamplesArray = [...Array(18)].map((_, i) => Math.pow(2, i));\n    const fftWindows = [\n        'bartlett', 'bartlettHann', 'blackman', 'cosine',\n        'gauss', 'hamming', 'hann', 'lanczoz', 'rectangular', 'triangular'\n    ];\n    const [isPlaying, setPlaying] = useState(false);\n    const [zoom, setZoom] = useState(zoomRange.initial);\n    //const [fftSamples, setFftSamples] = useState(fftSamplesArray[8]);\n    const fftSamples = fftSamplesArray[8];\n    const fftWindow = fftWindows[6];\n    // const [keypress, setKeyPress] = useState(false);\n    const wavesurferRef = useRef();\n    const waveContainerRef = useRef(null);\n    const spectrogramContainerRef = useRef(null);\n    const timelineContainerRef = useRef(null);\n    const waveColor = '#4BF2A7';\n    const bgColor = 'black';\n    const colors = colormap({\n        colormap: 'plasma',\n        nshades: 256,\n        format: 'float'\n    });\n    // construct wavesurfer\n    useEffect(() => {\n        if (!wavesurferRef.current &&\n            waveContainerRef.current !== null &&\n            spectrogramContainerRef.current !== null &&\n            timelineContainerRef.current !== null) {\n            console.log('WaveSurfer.create called');\n            wavesurferRef.current = WaveSurfer.create({\n                container: waveContainerRef.current,\n                waveColor: waveColor,\n                backgroundColor: bgColor,\n                splitChannels: true,\n                plugins: [\n                    TimeLine.create({\n                        container: timelineContainerRef.current\n                    }),\n                    Spectrogram.create({\n                        wavesurfer: wavesurferRef.current,\n                        container: spectrogramContainerRef.current,\n                        labels: true,\n                        colorMap: colors,\n                        fftSamples: fftSamples,\n                        windowFunc: fftWindow,\n                        splitChannels: true\n                    })\n                ]\n            });\n        }\n        // return () => {\n        //   const wavesurfer = wavesurferRef.current;\n        //   console.log(\"WaveSurfer unmounted\");\n        //   if (wavesurfer){\n        //     if(wavesurfer.isPlaying()) { wavesurfer.pause(); }\n        //     // wavesurfer.destroy();\n        //   }\n        // };\n    }, [\n        wavesurferRef,\n        waveContainerRef,\n        spectrogramContainerRef,\n        timelineContainerRef,\n        colors,\n        fftSamples\n    ]);\n    // load a wave file\n    useEffect(() => {\n        const wavesurfer = wavesurferRef.current;\n        if (wavesurfer && props.src) {\n            console.log('wavesurfer.load called');\n            wavesurfer.load(props.src);\n        }\n    }, [wavesurferRef, props.src]);\n    // play/pause based on the state\n    useEffect(() => {\n        const wavesurfer = wavesurferRef.current;\n        if (wavesurfer) {\n            if (isPlaying) {\n                wavesurfer.play();\n            }\n            else {\n                wavesurfer.pause();\n            }\n        }\n    }, [wavesurferRef, isPlaying]);\n    // control zoom\n    useEffect(() => {\n        const wavesurfer = wavesurferRef.current;\n        if (wavesurfer) {\n            wavesurfer.zoom(/*pxPerSec=*/ zoom);\n            wavesurfer.spectrogram.init();\n        }\n    }, [wavesurferRef, zoom]);\n    /*\n    // space key handling\n    const downHandler = e => {\n      if (e.key === ' ') {\n        setKeyPress(true);\n      }\n    };\n    const upHandler = e => {\n      if (e.key === ' ') {\n        setKeyPress(false);\n      }\n    };\n  \n    useEffect(() => {\n      // register\n      window.addEventListener('keydown', downHandler);\n      window.addEventListener('keyup', upHandler);\n  \n      // cleanup\n      return () => {\n        window.removeEventListener('keydown', downHandler);\n        window.removeEventListener('keyup', upHandler);\n      };\n    }, []);\n  \n    // toggle isPlaying for every keyPress\n    useEffect(() => {\n      const wavesurfer = wavesurferRef.current;\n      if (wavesurfer) {\n        if (keypress) {\n          setPlaying(!isPlaying);\n        }\n      }\n    }, [wavesurferRef, keypress]);\n    */\n    return (React.createElement(\"div\", { style: { width: '100%' } },\n        React.createElement(\"div\", { id: \"timeline\", ref: timelineContainerRef }),\n        React.createElement(\"div\", { id: \"waveform\", ref: waveContainerRef }),\n        React.createElement(\"div\", { id: \"spectrogram\", ref: spectrogramContainerRef }),\n        React.createElement(\"button\", { onClick: () => {\n                isPlaying ? setPlaying(false) : setPlaying(true);\n            } },\n            ' ',\n            \"Play/Pause\",\n            ' '),\n        React.createElement(\"div\", null,\n            \" \",\n            isPlaying ? 'Playing' : 'Pause',\n            \" \"),\n        React.createElement(\"div\", { id: \"zoom\" },\n            React.createElement(\"input\", { type: \"range\", value: zoom, onChange: e => setZoom(Number(e.target.value)), min: zoomRange.min, max: zoomRange.max, style: { width: '100%' } }),\n            \"zoom: \",\n            zoom,\n            \" [pixel/sec]\")));\n};\nexport default AudioComponent;\n//# sourceMappingURL=AudioComponent.js.map","import { WavWidget } from './widget';\n/**\n * The default mime type for the extension.\n */\nconst MIME_TYPES = ['audio/wav', 'audio/mp3', 'audio/flac'];\n/**\n * A mime renderer factory for wav data.\n */\nexport const rendererFactory = {\n    safe: true,\n    mimeTypes: MIME_TYPES,\n    createRenderer: options => new WavWidget(options)\n};\n/**\n * Extension definition.\n */\nconst extension = {\n    id: 'jupyterlab-wav:plugin',\n    rendererFactory,\n    rank: 0,\n    dataType: 'string',\n    fileTypes: [\n        {\n            name: 'wav',\n            fileFormat: 'base64',\n            mimeTypes: [MIME_TYPES[0]],\n            extensions: ['.wav']\n        },\n        {\n            name: 'mp3',\n            fileFormat: 'base64',\n            mimeTypes: [MIME_TYPES[1]],\n            extensions: ['.mp3']\n        },\n        {\n            name: 'flac',\n            fileFormat: 'base64',\n            mimeTypes: [MIME_TYPES[2]],\n            extensions: ['.flac']\n        }\n    ],\n    documentWidgetFactoryOptions: {\n        name: 'JupyterLab wav viewer',\n        primaryFileType: 'wav',\n        modelName: 'base64',\n        fileTypes: ['wav', 'mp3', 'flac'],\n        defaultFor: ['wav', 'mp3', 'flac']\n    }\n};\nexport default extension;\n//# sourceMappingURL=index.js.map","import { ReactWidget } from '@jupyterlab/apputils';\nimport React from 'react';\nimport AudioComponent from './AudioComponent';\n/**\n * The class name added to the extension.\n */\nconst CLASS_NAME = 'mimerenderer-wav';\n/**\n * A widget for rendering wav.\n */\nexport class WavWidget extends ReactWidget {\n    constructor(options) {\n        super();\n        this._mimeType = options.mimeType;\n        this._src = '';\n        this.addClass(CLASS_NAME);\n        console.log('WavWidget created');\n        console.log(`options.mimeType: ${this._mimeType}`);\n    }\n    renderModel(model) {\n        console.log('WavWidget renderModel called');\n        const data = model.data[this._mimeType];\n        this._src = `data:${this._mimeType};base64,${data}`;\n        this.update();\n        return Promise.resolve();\n    }\n    render() {\n        console.log('WavWidget render called');\n        return React.createElement(AudioComponent, { src: this._src });\n    }\n}\n//# sourceMappingURL=widget.js.map"],"names":[],"sourceRoot":""}