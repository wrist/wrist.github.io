(self.webpackChunk_axlair_jupyterlab_vim=self.webpackChunk_axlair_jupyterlab_vim||[]).push([[830],{830:(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>u});var n=o(581),l=o(586),a=o(865);const c=!!navigator.platform.match(/Mac/i);class i{constructor(e,t,o){this._commands=e,this._cm=t,this.enabled=o,this.lastActiveCell=null}onActiveCellChanged(e,t){this.modifyCell(t)}modifyCell(e){if(!e)return;this.lastActiveCell=e;const t=e.editor;if(this.enabled){t.setOption("keyMap","vim");const o=t.getOption("extraKeys")||{};o.Esc=this._cm.prototype.leaveInsertMode,c||(o["Ctrl-C"]=!1),this._cm.prototype.save=()=>{this._commands.execute("docmanager:save")},t.setOption("extraKeys",o);const n=this._cm.Vim;n.defineEx("quit","q",(e=>{this._commands.execute("notebook:enter-command-mode")})),this._cm.Vim.handleKey(t.editor,"<Esc>");const l=(t,o,n,a)=>{const c=o;let i=c.ch;const d=e;switch(null==a?void 0:a.lastMotion){case t.moveByLines:case t.moveByDisplayLines:case t.moveByScroll:case t.moveToColumn:case t.moveToEol:case l:i=a.lastHPos;break;default:a.lastHPos=i}const s=n.repeat+(n.repeatOffset||0);let m=n.forward?c.line+s:c.line-s;const r=t.firstLine(),u=t.lastLine(),C=t.findPosV(c,n.forward?s:-s,"line",a.lastHSPos);return(n.forward?C.line>m:C.line<m)&&(m=C.line,i=C.ch),m<r||m>u?(null!==d&&"markdown"===d.model.type&&(d.rendered=!0),void(n.forward?this._commands.execute("notebook:move-cursor-down"):this._commands.execute("notebook:move-cursor-up"))):(n.toFirstChar&&(i=function(e){if(!e)return 0;const t=e.search(/\S/);return-1===t?e.length:t}(t.getLine(m)),a.lastHPos=i),a.lastHSPos=t.charCoords(this._cm.Pos(m,i),"div").left,this._cm.Pos(m,i))};n.defineMotion("moveByLinesOrCell",l),n.mapCommand("k","motion","moveByLinesOrCell",{forward:!1,linewise:!0},{context:"normal"}),n.mapCommand("j","motion","moveByLinesOrCell",{forward:!0,linewise:!0},{context:"normal"}),n.defineAction("moveCellDown",((e,t)=>{this._commands.execute("notebook:move-cell-down")})),n.defineAction("moveCellUp",((e,t)=>{this._commands.execute("notebook:move-cell-up")})),n.mapCommand("<C-e>","action","moveCellDown",{},{extra:"normal"}),n.mapCommand("<C-y>","action","moveCellUp",{},{extra:"normal"}),n.defineAction("splitCell",((e,t)=>{this._commands.execute("notebook:split-cell-at-cursor")})),n.mapCommand("-","action","splitCell",{},{extra:"normal"})}else"vim"===t.getOption("keyMap")&&t.setOption("keyMap","default")}}var d=o(608);const s="@axlair/jupyterlab_vim",m="jupyterlab-vim:toggle";let r=!1;const u={id:s,autoStart:!0,activate:async function(e,t,o,l){e.commands.addCommand(m,{label:"Enable Notebook Vim mode",execute:()=>{l&&l.set(`${s}:plugin`,"enabled",!r)},isToggled:()=>r});const a=o.CodeMirror;let c=null,u=null,C=null,v=!1;async function b(l){r=!0===l.get("enabled").composite,e.commands.notifyCommandChanged(m),c&&(c.enabled=r),r?(null==u||u.dispose(),v||(v=!0,await e.restored,await o.ensureVimKeymap()),C=function(e,t,o){const{commands:l,shell:a}=e;function c(e){const o=t.currentWidget;return!1!==e.activate&&o&&a.activateById(o.id),o}function i(){return null!==t.currentWidget&&t.currentWidget===e.shell.currentWidget}return[l.addCommand("vim:run-select-next-edit",{label:"Run Cell and Edit Next Cell",execute:e=>{const t=c(e);if(t){const{context:e,content:o}=t;n.NotebookActions.runAndAdvance(o,e.sessionContext),t.content.mode="edit"}},isEnabled:i}),l.addCommand("vim:run-cell-and-edit",{label:"Run Cell and Edit Cell",execute:e=>{const t=c(e);if(t){const{context:e,content:o}=t;n.NotebookActions.run(o,e.sessionContext),t.content.mode="edit"}},isEnabled:i}),l.addCommand("vim:cut-cell-and-edit",{label:"Cut Cell(s) and Edit Cell",execute:e=>{const t=c(e);if(t){const{content:e}=t;n.NotebookActions.cut(e),e.mode="edit"}},isEnabled:i}),l.addCommand("vim:copy-cell-and-edit",{label:"Copy Cell(s) and Edit Cell",execute:e=>{const t=c(e);if(t){const{content:e}=t;n.NotebookActions.copy(e),e.mode="edit"}},isEnabled:i}),l.addCommand("vim:paste-cell-and-edit",{label:"Paste Cell(s) and Edit Cell",execute:e=>{const t=c(e);if(t){const{content:e}=t;n.NotebookActions.paste(e,"below"),e.mode="edit"}},isEnabled:i}),l.addCommand("vim:merge-and-edit",{label:"Merge and Edit Cell",execute:e=>{const t=c(e);if(t){const{content:e}=t;n.NotebookActions.mergeCells(e),t.content.mode="edit"}},isEnabled:i}),l.addCommand("vim:enter-insert-mode",{label:"Enter Insert Mode",execute:e=>{const t=c(e);if(t){const{content:e}=t;if(null!==e.activeCell){const n=e.activeCell.editor;t.content.mode="edit",o.Vim.handleKey(n.editor,"i")}}},isEnabled:i}),l.addCommand("vim:leave-insert-mode",{label:"Leave Insert Mode",execute:e=>{const t=c(e);if(t){const{content:e}=t;if(null!==e.activeCell){const t=e.activeCell.editor;o.Vim.handleKey(t.editor,"<Esc>")}}},isEnabled:i}),l.addCommand("vim:select-below-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=c(e);if(t){const{content:e}=t;return null!==e.activeCell&&"markdown"===e.activeCell.model.type&&(t.content.activeCell.rendered=!0),n.NotebookActions.selectBelow(t.content)}},isEnabled:i}),l.addCommand("vim:select-above-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=c(e);if(t){const{content:e}=t;return null!==e.activeCell&&"markdown"===e.activeCell.model.type&&(t.content.activeCell.rendered=!0),n.NotebookActions.selectAbove(t.content)}},isEnabled:i}),l.addCommand("vim:select-first-cell",{label:"Select First Cell",execute:e=>{const t=c(e);if(t){const{content:e}=t;e.activeCellIndex=0,e.deselectAll(),null!==e.activeCell&&d.ElementExt.scrollIntoViewIfNeeded(e.node,e.activeCell.node)}},isEnabled:i}),l.addCommand("vim:select-last-cell",{label:"Select Last Cell",execute:e=>{const t=c(e);if(t){const{content:e}=t;e.activeCellIndex=t.content.widgets.length-1,e.deselectAll(),null!==e.activeCell&&d.ElementExt.scrollIntoViewIfNeeded(e.node,e.activeCell.node)}},isEnabled:i}),l.addCommand("vim:center-cell",{label:"Center Cell",execute:e=>{const t=c(e);if(t&&null!==t.content.activeCell){const e=t.content.activeCell.inputArea.node.getBoundingClientRect();t.content.scrollToPosition(e.bottom,0)}},isEnabled:i})]}(e,t,a),null==c||c.modifyCell(c.lastActiveCell),t.forEach((e=>{e.node.dataset.jpVimMode="true"}))):(null==C||C.forEach((e=>e.dispose())),u=e.commands.addKeyBinding({command:"notebook:enter-command-mode",keys:["Escape"],selector:".jp-Notebook.jp-mod-editMode"}),null==c||c.modifyCell(c.lastActiveCell),t.forEach((e=>{e.node.dataset.jpVimMode="false"}))),t.widgetAdded.connect(((e,t)=>{t.node.dataset.jpVimMode=`${r}`}))}return c=new i(e.commands,a,r),t.activeCellChanged.connect(c.onActiveCellChanged,c),l.load(`${s}:plugin`).then((e=>{b(e),e.changed.connect(b)}),(e=>{console.error(`Could not load settings, so did not active ${s}: ${e}`)})),Promise.resolve()},requires:[n.INotebookTracker,l.ICodeMirror,a.ISettingRegistry]}}}]);